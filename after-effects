#!/usr/bin/env bash
# shellcheck disable=SC2059
# Legal Preamble:
#
# This script is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This script is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <https://www.gnu.org/licenses/gpl-3.0.txt>

# Version:2.0
# Author: Prasad Tengse
# Licence: MIT
# Github Repository: https://github.com/tprasadtp/after-effects-ubuntu
# Requirements - Bash v4.4 and above


#Constants
DATE=$(date +%Y-%m-%d:%H:%M:%S)
SCRIPT=$(basename "$0")
dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
log_file="$dir"/minchu-logs/after-effects.log
mkdir -p "$dir"/minchu-logs


function _init_script_variables()
{
  # Function defines Script variables
  # Necessary variables used by the script are initialized here. This function
  # should be called first before choices are made, always.

  #grabbing os info
  readonly OS_DISTRIBUTION=$(lsb_release --id | cut -f2 | tr '[:upper:]' '[:lower:]')
  readonly VERSION=$(lsb_release --release | cut -f2)
  readonly LONG_VERSION=$(lsb_release -d | cut -f2 | cut -d ' ' -f2)
  CODE_NAME=$(lsb_release -cs)
  readonly ARCH=$(uname -m | sed 's/x86_//;s/i[3-6]86/32/')
  readonly SOURCES_FILE_DIR=/etc/apt/sources.list.d

  #colors for display
  readonly BLUE=$(tput setaf 6)
  readonly YELLOW=$(tput setaf 3)
  readonly NC=$(tput sgr 0)
  readonly MAGNATA=$(tput setaf 5)

  # Package list files
  readonly DEB_FILES_LIST="$dir"/data/deb_files.list
  readonly PPA_LIST="$dir"/data/lists/ppa.list
  readonly app_list_list="$dir"/data/app-list.list



  #============================ Switches/ bools ================================
  # Latest wine builds
  readonly add_winehq_repo=false

  #Docker community edition
  readonly add_docker_repo=true

  #Fix Repo not available for latest release
  readonly fix_repo_not_available_for_latest="true"
  readonly code_name_latest_release="artful"
  readonly codename_previous_release="zesty"
  code_name_fix_latest="$code_name_latest_release"

  # Simulate apt-get install
  simulate_apt_install="true"

  #=============================================================================

}

function _init_script_initialization()
{
  # This function logs the Necessary details which hel--dry-run--dry-runps in debugging.
  # Should be used after _init_script_variables function
  _debug_log "Following details were recognised by the Script"
  _debug_log "OS:${OS_DISTRIBUTION}"
  _debug_log "VERSION:${VERSION}"
  _debug_log "code_name:${CODE_NAME}"
  _debug_log "ARCHITECHTURE:${ARCH}"
  _debug_log "PATH FOR SOURCE FILES:${SOURCES_FILE_DIR}"

  #disable hist chars  so that I can print "!!"" properly
  histchars=
}


# Utility Functions
function line_fill()
{
    printf "%-$(tput cols)s@%s\n" | sed -e "s/ /-/g" -e "s/-@/ /" -e "s/@-/ /"
}
function set_blue()
{
  tput setaf 6
}

function set_yellow()
{
  tput setaf 3
}
function set_default()
{
  tput sgr 0
}

function _script_launch_log()
{
    _debug_log "Executing Script"
    printf "\nRunning %s on %s" "$SCRIPT" "DATE\n" >> "$log_file"
}

function _goodbye_msg ()
{
printf "\n$(tput setaf 3)It was nice helping you,\n\nHave a great time with this Linux Machine.\n\nWith loads of love,\n$(tput setaf 6)${SCRIPT} running on $(uname -n) as ${USER} $(tput sgr 0)\n"
}

function _script_exit_log()
{
    _debug_log "Exiting Script"
    printf "\nFinished %s on %s.\n Last exit code was: %d\n" "$SCRIPT" "$DATE" "$?" >> "$log_file"
}


function _debug_log()
{
    local msg="$1"
    printf "\n[$(date)] [ DEBUG ]\t$msg \n" >> "$log_file"
}

function _log_and_show()
{
    local msg="$1"
    printf "$msg\n"
    printf "\n[$(date)] [  LOG  ]\t$msg \n" >> "$log_file"
}

function _log_and_exit()
{
  # ARG-1 log msg
  # ARG-2 exit code int
    local msg="$1"
    printf "\n[$(date)] [  LOG  ]\t$msg \n" | tee -a "$log_file"
    exit "$2";
}



function _fix_ubuntu_derivatives()
{
  # Ubuntu derivatives use their own codename (Linux mint, Elementary) some repository functions require
  # That ubuntu codename is used.
  # This function fixes that for
  # Linux mint 17.X : Ubuntu 14.04 Trusty,
  # Linux mint 18.x : Ubuntu 16.04 Xenial,
  # Elementary OS Loki : Ubuntu 14.04 Trusty,
  # Elementary OS Freya and Juno : Ubuntu 16.04 Xenial
  # POP_OS! uses Ubuntu codenames (No need to apply fix)
  # IF the release is not known exits the script for safety.
  _log_and_show "Checking for known Ubuntu derivatives....\n"
  set_yellow;
  case ${code_name} in
      qiana | rebecca | rafaela | rosa)     _log_and_show "Release is Linux mint 17.X. Setting additional repositoris to follow Ubuntu 14.04."
                                            code_name="trusty"
                                            ;;
      sarah | serena | sonya | sylvia)      _log_and_show "Release is Linux mint 18.X. Setting additional repositoris to follow Ubuntu 16.04."
                                            code_name="xenial"
                                            ;;
      loki | juno)                          _log_and_show "This release of Elementary OS is based on Ubuntu 16.04 Xenial. External repositories will use 16.04."
                                            code_name="xenial"
                                            ;;
      freya)                                _log_and_show "This release of Elementary OS is based on Ubuntu 14.04 Trusty. External repositories will use 14.04."
                                            code_name="trusty"
                                            ;;
      xenial | trusty | artful | zesty)     _log_and_show "No known derivative of Ubuntu which uses different codenames found. Keeping the codename as: $code_name.\n If installation fails or errors out, please report.";
                                            ;;
      *)                                    _log_and_show "[ ERROR ]"
                                            _log_and_show "Unknown Distribution/Release.\n This Script is not designed to run on this ($code_name) distro/release."
                                            _script_exit_log;
                                            exit 500;
                                            ;;
  esac
  set_default;

}


function _test_internet_connection ()
{
  # Function to check internet connection
  _log_and_show "Testing internet connection"
  if wget --tries=3 --timeout=15 www.google.com -O /tmp/testinternet &>/dev/null 2>&1; then
    _log_and_show "Internet connection available."
  else
    _log_and_show "Booooooo! You are not connected to the Internet!. Please check your Internet connection and try again."
    exit 400;
  fi
}


function _test_conflicting_apps ()
{
  # Function checks if any apps like syanptic aptitude are running.
  _log_and_show "Checking if conflicting apps are running..."
  for lock in synaptic update-manager software-center apt-get dpkg aptitude
  do
    # shellcheck disable=SC2009
    if ps -U root -u root u | grep $lock | grep -v grep > /dev/null;
       then
         _log_and_show "Installation won't work. Please close $lock first then try again."
         exit 404;
       else
        _debug_log "$lock not running, Checking other apps.."
     fi
   done
   _debug_log "No conflicting apps are running. Proceeding with Installation."
}


function install_add_repo_pre_requisites()
{
  # This function installs required packages for adding apt repositories
  # These should be present in your base ubuntu instal. If not present then, this function
  # will install them.
  # Following are the packages installed by this function:
  # linux-image-extra-<>, apt-transport-https, ca-certificates,
  # curl, software-properties-common
  _log_and_show "Installing dependencies Necessary for adding repositories"
  _debug_log "Installing apt-transport-https, ca-certificates, curl, software-properties-common "
   apt-get install apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common >> "$log_file" || _log_and_exit "Failed to install Repository prereqisits. Script cannot continue!!" "102"
  _log_and_show "Added prereqisits."
}


function fix_repo_not_available()
{
  # If repository is not available for latest ubuntu release, this uses last stable release
  # (may not be LTS) for adding repository
  if [ "$fix_repo_not_available_for_latest" == "true" ]; then
    # Only do this on latest releases
    if [ "$code_name" == "$code_name_latest_release" ]; then
      _debug_log "Repository is not available for latest ubuntu release.\n Using last known stabel release: $code_name_latest_release."
      printf "${YELLOW}Since Repository is not available for the latest Ubuntu release, \npreviously available repositories from an older release: $codename_previous_release is being used\n"
      printf "You need to modify this in Software and updates when its available for ${code_name_latest_release}.\n${NC}"
      code_name_fix_latest="$codename_previous_release"
    else
      _debug_log "This release has repositories available. No need to apply fix repo not available error, when builds are latest."
    fi
  else
    _debug_log "fix_repo_not_available is disabled."
fi
}


function add_ppa()
{
  # Function to add ppa from reading ppa from ppa.list file in /data directory
  # List file should contain ppas in following format
  # ppa:ppa:<author>/<ppa> for example, ppa:mozillateam/firefox-nex for adding firefox next/Beta PPA

    # Function Reads the file ./data/ppa.list and adds the ppa one by one
    while IFS= read -r line
      do
           _log_and_show "Adding PPA :$line:\n"
           _debug_log "Adding: $line"
           if add-apt-repository -y "$line" | tee -a "$log_file" ; then
             _log_and_show "Added: $line."
           else
             _log_and_show "Some Error occured while adding $line. Ignoring and moving on.\n"
           fi
      done < "$PPA_LIST"
      set_yellow;
      _log_and_show "Added PPAs in the list file."
      set_default;
}


function add_repositories()
{
  # This function adds repositories for several apps like
  # Google Chrome, Spotify, AWS tools, Google Cloud SDK, GCSFUSE(Part of google cloud),
  # Skype, Docker, Skype, Microsoft Visual Studio Code, Google Earth, Insync client
  # WARNING: Some repositories might not support latest version of Ubuntu.
  # ${code_name_fix_latest} is used in known cases where a repository might be unavailable for latest Ubuntu Release

  # install dependencies required
  install_add_repo_pre_requisites;
  fix_repo_not_available;

  # Add Google Chrome and Google Earth
  printf "${YELLOW}Adding Google Chrome repository${NC}"
  _log_and_show "Adding Google Package Siging Key"
  wget -q -N -O - https://dl.google.com/linux/linux_signing_key.pub >> $"log_file"
  _debug_log "Adding Google Key to Trusted Keys list"
  apt-key add linux_signing_key.pub >> "$log_file" || _log_and_show "Adding Trusted Keys for Google failed."
  _log_and_show "Adding Google Chrome Repository\n"
  echo "deb http://dl.google.com/linux/chrome/deb/ stable main" > ${SOURCES_FILE_DIR}/google.list || _log_and_show "Adding Google Chrome Repository failed"
  _log_and_show "Adding Google Earth Repository\n"
  echo "deb [arch=amd64] http://dl.google.com/linux/earth/deb/ stable main" > ${SOURCES_FILE_DIR}/google-earth.list || _log_and_show "Adding Google Chrome Repository failed"

  # Spotify client
  _log_and_show "Adding Spotify repository"
  _debug_log "Adding Spotify Keys"
  apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys BBEBDCB318AD50EC6865090613B00F1FD2C19886 >> "$log_file" || _log_and_show "Adding Spotify Repository failed"
  echo "deb http://repository.spotify.com stable non-free" > ${SOURCES_FILE_DIR}/spotify.list || _log_and_show "Adding Spotify Repository Failed"

  # Insync
  _log_and_show "Adding Insync repository\n"
  printf "Insync repositories are not updated soon enough when a new release of Ubuntu is released.\n If you are using a "
  sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ACCAF35C
  echo "deb http://apt.insynchq.com/ubuntu $code_name_fix_latest non-free contrib" > ${SOURCES_FILE_DIR}/insync.list || _log_and_show "Adding Insync Repository failed"

  # Google Cloud SDK and GCS-FUSE
  _log_and_show "Adding Google Cloud SDK repository"
  _debug_log "Getting Google Cloud repository sigining key"
  wget -N  https://packages.cloud.google.com/apt/doc/apt-key.gpg -O google-cloud-apt-key.gpg >> "$log_file"
  _debug_log "Adding Google Cloud repository sigining key"
  apt-key add google-cloud-apt-key.gpg >> "$log_file" || _log_and_show "Adding Googel Cloud SDK repository key failed."
  _debug_log "Adding GCSFUSE repository"
  echo "deb http://packages.cloud.google.com/apt gcsfuse-${code_name_fix_latest} main" > ${SOURCES_FILE_DIR}/gcsfuse.list  || _log_and_show "Adding GCSFUSE Repository failed"
  _debug_log "Adding Google Cloud SDK repository"
  echo "deb http://packages.cloud.google.com/apt google-cloud-sdk-${code_name_fix_latest} main" > ${SOURCES_FILE_DIR}/google-cloud-sdk.list  || _log_and_show "Adding Google Cloud SDK Repository failed"

  #AWS
  # Handled by pip

  #Wine HQ
  if [ "$add_winehq_repo" == "true" ]; then
    _debug_log "Adding WINWHQ is set to true"
    _log_and_show "Adding winehq repository"
    _debug_log "Getting WineHQ repository Key"
    wget -N https://dl.winehq.org/wine-builds/Release.key -O wine-hq-sigining-key.key >> "$log_file"
    _debug_log "Adding winehq Key"
    apt-key add wine-hq-sigining-key.key > "$log_file" || _log_and_show "Adding WineHQ keys failed"
    _debug_log "Adding wine"
    echo "deb https://dl.winehq.org/wine-builds/ubuntu/ $code_name_fix_latest main" > ${SOURCES_FILE_DIR}/winehq.list || _log_and_show "Adding WineHQ repository failed"
  else
    _debug_log "Adding winehq is set to false. Skipping."
  fi

  # Docker CE
  if [ "$add_docker_repo" == "true" ]; then
    _debug_log "Adding Docker repository is set to true"
    _log_and_show "Adding Docker-CE repository"
    _debug_log "Getting Docker-CE repository Key"
    wget -N https://download.docker.com/linux/ubuntu/gpg -O doker-key.gpg >> "$log_file"
    _debug_log "Adding Docker repository key"
    apt-key add docker-key.gpg >> "$log_file" || _log_and_show "Adding WineHQ keys failed"
    _debug_log "Adding Docker-CE"
    echo "deb [arch=$ARCH] https://download.docker.com/linux/ubuntu  $code_name_fix_latest stable" > ${SOURCES_FILE_DIR}/docker.list || _log_and_show "Adding Docker-CE repository failed"
  else
    _debug_log "Adding Docekr-CE is set to false. Skipping."
  fi

  # Skype
  _log_and_show "Adding Skype for linux repository"
  _debug_log "Getting Skype repository key"
  wget -N https://repo.skype.com/data/SKYPE-GPG-KEY -O skype-linux-key.gpg >> "$log_file"
  _debug_log "Adding Skype keys to trusted list"
  apt-key add skype-linux-key.gpg >> "$log_file" || _log_and_show "Adding Skype for linux key failed"
  echo "deb [arch=$ARCH] https://repo.skype.com/deb stable main" > $SOURCES_FILE_DIR/skype-stable.list || _log_and_show "Adding Skype for linux repository failed"

  #Visual Studio Code
  _log_and_show "Addidng Visual Studio Code repository"
  _debug_log "Getting GPG keys fore repository"
  wget -N https://packages.microsoft.com/keys/microsoft.asc >> "$log_file"
  _debug_log "Converting key"
  gpg --dearmor > microsoft.gpg
  _debug_log "Moving Key to trusted GPG keys directory"
  mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg >> "$log_file"
  echo "deb [arch=$ARCH] https://packages.microsoft.com/repos/vscode stable main" > ${SOURCES_FILE_DIR}/vscode.list

  # Enable canonical Partner repos
  _log_and_show "Enabling canonical partner repositoris"
  add-apt-repository "deb http://archive.canonical.com/ubuntu $code_name partner" >> "$log_file"

}


function update_repos()
{
  printf "${BLUE}Updating Repositories\n${NC}"
  apt-get update >> "$log_file" || _log_and_show "Something went wrong cannot update Repositories. Please see the log file"
}


function upgrade_apps()
{
  printf "Upgrading apps"
  apt list --upgradable | tee -a "$log_file"
  _log_and_show "The above list of apps are upgradable."
  sleep 5;
  _debug_log "Upgrading Apps"
  apt-get upgrade && dist-upgrade | tee -a "$log_file"
}


function  upgrade_system()
{
  update_repos;
  upgrade_apps;
}

function disable_external_repos()
{
  # Function to disable external repositoris added by this script.
    _debug_log "Deleting Keys"
    local old_path
    old_path=$(pwd)
    sudo apt-key del D38B4796
    sudo apt-key del 7FAC5991
    sudo apt-key del C07CB649
    sudo apt-key del A4EBB320
    sudo apt-key del 0D988D6E
    sudo apt-key del DF7587C3
    _debug_log "Removing list files from ${SOURCES_FILE_DIR}"
    cd /etc/apt/sources.list.d && rm  -f google.* google-earth.* skype-stable.* spotify.* insync.* google-cloud-sdk.* gcsfuse.* docker.* winehq.*
    cd "$old_path" || return
}

function install_apps()

{
  # Function to install apps mentioned in individual list files in the app-list.list
  # Repositories manually added get their own list file because they are prone to errors
  #Accept some EULA
  # This function reads from list of lists
  # File ./data/app-list.list contains list of lists which contain package names of the packages to be installed.
  # external-repo should always be at last to avois any errors on previous lists.
  # No checks are being made on any of the files for validity. One entry per line is recommended.
  # If a package is not available entire collection in the file *.list will not be installed!!

  echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | sudo debconf-set-selections
  #Install starts here
  local apt_command="install -y -q"
  # Check if simulate is true
  if [ "$simulate_apt_install" == "true" ]; then
    _log_and_show "Simulating apt-get install. Nothing will be installed!!"
    apt_command="install -y --dry-run"
  fi

  while IFS= read -r line
    do
         _log_and_show "Installing Apps from list :$line:"
         _debug_log "$line\n"
         cat "$line" >> "$log_file"
         apt-get "$apt_command" "$(cat "$line")" >> "$log_file"
         _debug_log "Running install -f"
         apt-get install -f >> "$log_file"
    done < "$app_list_list"

}

function install_debs ()
{

  #Function to get the deb files from UR_DEB_URL in the ./data/deb_files.list
  # The list fine has following format
  #  URL to get the deb file  <space or tab> NAME_OF_THE_APP

  local deb_url
  local deb_name
  local deb_installelr_name
  local deb_command="-i"
  local apt_command="install -y -f"

  # Check if simulate is true
  if [ "$simulate_apt_install" == "true" ]; then
    _log_and_show "Simulating apt-get & deb install. Nothing will be installed!!"
     apt_command="install -y -f --dry-run"
     deb_command="--simulate -i"
  fi

  if (whiptail --title "Install DEB Files" --yesno "Proceed with install?" 10 60) then
    _log_and_show "Attempting to download and install DEB files :)"
    while IFS= read -r line
      do
           _debug_log "$line"
           deb_url=$(echo "$line" | cut -f1 )
           deb_name=$(echo "$line" | cut -f2 )
           _debug_log "Deb file url: $deb_url \n DEB file name:$deb_name"
           _log_and_show "Downloading and installing $deb_name"
           wget -N "$deb_url" >> "$log_file"
           deb_installelr_name=$(basename "$deb_url")
           _debug_log "Installing $deb_installelr_name"
           dpkg "$deb_command" "$deb_installelr_name" >> "$log_file"
           _debug_log "Installing missing packages"
           apt-get "$apt_command" >> "$log_file"
            # shellcheck disable=SC2181
           if [ "$?" = "0" ]; then
                _debug_log "Installed $line successfully"
               $?="0"
           else
                _debug_log "Some error occured during downloading and installing $line , Ignoring and moving on!"
                $?="0"
          fi
      done < "$DEB_FILES_LIST"
  else
      _debug_log "Selected No for DEB installing, Returning to Main menu"
      _process_opts;
  fi
}

function all_in_one()
{
  #Wrapper for all options
  printf "${YELLOW}Apps will be installed, upgrades and repositoris and will be added, and deb files will b downloaded and installed!\nThis action is not reversible in all cases\n"
  _debug_log "All in One initialized"
  update_repos;
  upgrade_apps;
  add_ppas;
  add-apt-repository;
  install_apps;
  install_debs;
}


function _process_opts
{
    # shellcheck disable=SC2046
    eval $(resize)
    MAIN=$(whiptail \
        --notags \
        --title "$SCRIPT" \
        --menu "\nWhat would you like me to do?" \
        --cancel-button "Quit" \
        $LINES $COLUMNS $(( LINES - 12 )) \
        update_repos           'Update Repositories' \
        upgrade_system         'Upgrade packages to latest' \
        all_in_one             'Install all apps and configure, I am in control' \
        add_repositories       'Add Common Repositories' \
        add_ppa               'Add PPAs from file' \
        install_apps           'Install most common tools' \
        install_debs           'Install DEBS not available in Repositories' \
        disable_external_repos 'Reset Repositories for cleanup or another test run' \
        3>&1 1>&2 2>&3)

    exitstatus=$?
    if [ $exitstatus = 0 ]; then
        $MAIN
    else
        quit
    fi
}


# Quit
function quit
{
    if (whiptail --title "Quit" --yesno "Are you sure you want quit?" 10 60) then
        echo "Exiting..."
        goodbye_msg;
        _script_exit_log;
        exit 99;
    else
        _process_opts;
    fi
}


function main()
{

  if [[ $EUID -ne 0 ]]; then
    _debug_log "Insufficinet privilages"
    _log_and_show "[ ERROR ] This script must be run as root.\nPlease use sudo %s to run as root.\n" "$SCRIPT"
    _log_and_show "\n[ DEBUG- %s ] Insufficinet privilages.\n" "$DATE" >> "$log_file"
    exit 100;
  fi

  _init_script_variables;
  _init_script_initialization;
  _fix_ubuntu_derivatives;
  _test_internet_connection;
  _test_conflicting_apps;
  while :
  do
    _process_opts;
  done

}


#Initialze main
main "$@"
#Logs exit and exit code of script
_script_exit_log
