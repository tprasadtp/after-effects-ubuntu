#!/usr/bin/env bash
# shellcheck disable=SC2059
# Legal Preamble:
#
# This script is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This script is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <https://www.gnu.org/licenses/gpl-3.0.txt>

# Author: Prasad Tengse
# Licence: GPLv3
# Github Repository: https://github.com/tprasadtp/ubuntu-post-install
# Requirements - Bash v4 and above
#              - whiptail, lsb-release, wget, iputils-ping
#              - Ubuntu 14.04/16.04/17.04/17.10/18.04 or Elementary Freya/Loki/Juno
#              - or Mint 17.X or 18.X or 19.X
#

set -o pipefail
#Constants
EXEC_START=$(date +%s)
DATE=$(date +%Y-%m-%d:%H:%M:%S)
readonly SCRIPT=$(basename "$0")
readonly dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
log_file="$dir"/after-effects-logs/after-effects.log
mkdir -p "$dir"/after-effects-logs
readonly REL_NAME="4.0 Alpha"
readonly REL_NUM=43
EXEC_TIME=0;


function _init_printf_variables()
{
  #Initialize printf variables

    #================ Because I care about Beauty of Output Logs =================
    readonly         _adding="[     Adding    ]"
    readonly          _added="[     Added     ]"
    readonly     _adding_ppa="[   Adding PPA  ]"
    readonly      _added_ppa="[   Added  PPA  ]"
    readonly          _oh_no="[     Oh No!    ]"
    readonly     _installing="[   Installing  ]"
    readonly      _installed="[   Installed   ]"
    readonly       _removing="[    Removing   ]"
    readonly        _removed="[    Removed    ]"
    readonly       _deleting="[    Deleting   ]"
    readonly        _deleted="[    Deleted    ]"
    readonly      _linuxmint="[  Linux - Mint ]"
    readonly     _elementary="[ Elementary-OS ]"
    readonly      _canonical="[  Canonical-y  ]"
    readonly        _purging="[    Purging    ]"
    readonly         _purged="[    Purged     ]"
    readonly           _done="[     Done!     ]"
    readonly          _error="[     Error!    ]"
    readonly     _aptrunning="[ I'm not Alone ]"
    readonly       _internet="[    Internet   ]"
    readonly             _ok="[      OK!      ]"
    readonly       _updating="[    Updating   ]"
    readonly        _updated="[    Updated    ]"
    readonly      _upgrading="[   Upgrading   ]"
    readonly       _upgraded="[   Upgraded    ]"
    readonly    _derivatives="[  Derivatives  ]"
    readonly      _conflicts="[   Conflicts   ]"
    readonly         _notice="[    Notice     ]"
    readonly    _downloading="[  Downloading  ]"
    readonly           _info="[     Info      ]"
    readonly         _failed="[     Failed    ]"
    readonly   _google_cloud="[      GCP      ]"
    readonly       _simulate="[   Simulating  ]"
    readonly       _fix_repo="[      Fix      ]"
    readonly        _deboalt="[    Deboalt    ]"
    readonly           _warn="[    WARNING    ]"
    readonly         _whoops="[   Whoopsie!   ]"
    readonly         _travis="[   Travis-CI   ]"
    readonly         _docker="[     Docker    ]"
    readonly    _pre_release="[  Pre Release  ]"
    readonly    _new_release="[  New Release  ]"
    readonly        _version="[    Version    ]"
    readonly       _checking="[    Checking   ]"
    readonly        _checked="[    Checked    ]"
    readonly            _eol="[      EOL      ]"
    readonly   _pip_python_2="[      PIP2     ]"
    readonly   _pip_python_3="[      PIP3     ]"
    readonly   _dependencies="[  Dependencies ]"
    readonly        _running="[    Running    ]"
    readonly         _script="[  Shell-Script ]"
    readonly      _autopilot="[   Autopilot   ]"
    readonly            _api="[      API      ]"
    readonly          _debug="[     DEBUG     ]"
    readonly       _ppa_logs="[    PPA-Logs   ]"
    readonly       _apt_logs="[    APT-Logs   ]"
    readonly       _cat_logs="[    CAT-Logs   ]"
    readonly      _dpkg_logs="[    PKG-Logs   ]"
    readonly   _apt_key_logs="[  APT-KEY-Logs ]"
    readonly       _pip_logs="[    PIP-Logs   ]"
    readonly     _hooks_logs="[   Hooks-Logs  ]"
    readonly _eol_date_zesty="January 13th, 2018"
    #readonly           _falg="[     Flag      ]"

    #colors for display
    readonly BLUE=$(tput setaf 6)
    readonly YELLOW=$(tput setaf 3)
    readonly NC=$(tput sgr 0)
    readonly MAGENTA=$(tput setaf 5)


}


function _init_script_variables()
{
  # Function defines Script variables
  # Necessary variables used by the script are initialized here. This function
  # should be called first before choices are made, always.

  #grabbing os info
  readonly OS_DISTRIBUTION=$(lsb_release --id | cut -f2 | tr '[:upper:]' '[:lower:]')
  readonly VERSION=$(lsb_release --release | cut -f2)
  readonly LONG_VERSION=$(lsb_release -d | cut -f2 | cut -d ' ' -f2)
  code_name=$(lsb_release -cs)
  readonly architeture=$(uname -m | sed 's/x86_//;s/i[3-6]86/32/')
  if [ "$architeture" == "64" ];then
    _debug_log "Architecture is 64 bit."
    readonly ARCH=amd64
    #readonly jq_bin="vendor/jq-linux64"
    #_debug_log "JQ Binary is 64 Bit: $jq_bin"
  elif [[ "$architeture" == "32" ]]; then
    _debug_log "Architecture is 32 bit."
    readonly ARCH=i386
    #readonly jq_bin="vendor/jq-linux32"
    #_debug_log "JQ Binary is 32 Bit: $jq_bin"
  else
    set_yellow;
    _log_and_show "${_error} This architecture is not supported by this script!"
    set_default;
    _log_and_exit "Unsupported Architeture. $(uname -m)" "11"
  fi


  # Get Hostname & a UUID
  CLIENT_NAME=$(hostname)
  CLIENT_ID=$(cat /proc/sys/kernel/random/uuid)


  # etc sources list dir
  readonly SOURCES_FILE_DIR=/etc/apt/sources.list.d

  # Ping URL
  readonly PING_URL="www.google.com"

  # Package list files
  readonly deb_files_list="$dir"/data/deb-files.list
  readonly ppa_list="$dir"/data/ppa.list
  readonly app_list_list="$dir"/data/app-list.list
  readonly purge_list="$dir"/data/purge.list
  readonly post_script_list="$dir"/data/post-script.list
  readonly pre_script_list="$dir"/data/pre-script.list


  #============================ Switches/ bools ================================
  # Latest wine builds
  readonly add_winehq_repo=true

  #Docker community edition
  readonly add_docker_repo=true

  #Mendeley Desktop
  readonly add_mendeley_repo=true

  #Fix Repo not available for latest release
  bool_fix_repo_not_available_for_latest="false"
  readonly code_name_latest_release="bionic"
  readonly codename_previous_release="artful"

  # Allow repo fixes for Upcoming releases of ubuntu and its derivatives.
  bool_fix_repo_not_available_for_upcoming_release="false"
  readonly codename_upcoming_release="cosmic"

  # Simulate apt-get install by default its false
  # can be set to true if an argument -s or --simulate is passed while running the script
  simulate_apt_install="false"

  # Purge not required packages
  # Default is false
  # Requires commad line option -d to be passed via command line otherwise it will not work.
  # Set this to true if you dont want to pass -d every time
  bool_purge_not_required_pkgs="false"

  # Say yes to all (No whiptail dialogs)
  # Default is false
  # Can be set to true and dialog boxes will be skipped if command line option -y is passed.
  # Set this to true if you dont want to pass -y every time
  bool_say_yes_to_all="false";

  # Configure Partner Repositoris
  # Some Releases like linux mint have their own way of enabling partner Repositoris,
  # Disable adding partner Repositoris when using Ubuntu Derivatives like Linux Mint.
  # Default is true
  # _fix_ubuntu_derivatives will take care of this variable and set it to false if
  # derivative of ubuntu is found.
  bool_config_partner_repo="true"

  # Keep Downloaded DEB packages
  bool_preserve_debs="false"

  # Checks for Version and Changelogs via APIs
  # Define API node endpoints

  bool_check_version="true"
  bool_ignore_api_error="false"
  bool_custom_api_node="false"

  # Define API Node name aka server name
  api_node="ae.prasadt.com"
  api_endpoint=${api_node}/api/
  bool_node_use_ssl="true"

  # Default Stats Server name & Stats reporting flag
  bool_report_stats="true"
  stats_node="stats.ae.prasadt.com"


  # Pre and Post Scripts
  # Scripts can be defines in list pre-script.list and post-script.list
  # Which will run before and after all the tasks.
  # these flags control it.
  bool_enable_pre_scripts="false"
  bool_enable_post_scripts="false"

  # Current directory check
  bool_pwd_check_passed="false"

}

function _init_print_basic_info()
{
  # This function logs and displays the Necessary details which helps in debugging.
  # Should be used after _init_script_variables function.
  _log_and_show "${_notice} Following details are recognised by the Script."
  _log_and_show "${_info} Hostname: ${CLIENT_NAME}"
  _log_and_show "${_info} UUID for Run: ${CLIENT_ID}"
  _log_and_show "${_info} Distro: ${OS_DISTRIBUTION}"
  _log_and_show "${_info} Version: ${VERSION}"
  _log_and_show "${_info} Code Name: ${code_name}"
  _log_and_show "${_info} Architeture: ${ARCH}"
  _log_and_show "${_info} Path for sources.list.d: ${SOURCES_FILE_DIR}"
  _log_and_show "${_version} $REL_NAME"
  _log_and_show "${_info} Release Number: $REL_NUM"

  #disable hist chars  so that I can print "!!"" properly
  histchars=
}


# Utility Functions
function _line_fill()
{
    printf "%-$(tput cols)s@%s\n" | sed -e "s/ /-/g" -e "s/-@/ /" -e "s/@-/ /"
}

function set_blue()
{
  tput setaf 6
}

function set_yellow()
{
  tput setaf 3
}

function set_magenta()
{
  tput setaf 5
}

function set_red()
{
  tput setaf 1
}

function set_default()
{
  tput sgr 0
}

function _script_launch_log()
{
    _debug_log "Executing Script"
    _line_fill >> "$log_file"
    _debug_log "Running %s on %s as %s" "$SCRIPT" "$DATE" "$USER"
}

function _goodbye_msg ()
{
    printf "\n$(tput setaf 3)It was a pleasure helping you,\nHave a great time with this Linux Machine.\nWith loads of love,\n$(tput setaf 6)${SCRIPT} running on $(uname -n)$(tput sgr 0)\n"
}


function _debug_log()
{
    local msg="$1"
    printf "[$(date)] ${_debug} $msg \n" >> "$log_file"
}

function _log_and_show()
{
    local msg="$1"
    printf "$msg\n"
    printf "[$(date)] $msg \n" >> "$log_file"
}

function _log_and_exit()
{
  # ARG-1 log msg
  # ARG-2 exit code int
    local msg="$1"
    printf "$msg\n";
    #shellcheck disable=SC2129
    printf "[$(date)] ${_debug}\t$msg \n" >> "$log_file";
    printf "\nFinished %s on $(date).\nLast exit code was: %d\n" "$SCRIPT" "$?" >> "$log_file";
    set_yellow
    _line_fill | tee -a "$log_file"
    set_default
    exit "$2";
}

function delete_log_file()
{
  set_yellow;
  printf "${_deleting} log file %s.\n" "$log_file"
  set_default;
  rm -f "$log_file"
  exit 0;

}


function _check_if_in_pwd()
{
  # Check if script is in current directory
  local file
  file="$(pwd)"
  file+="/$SCRIPT"

  if [ -x "$file" ]; then
    _debug_log "Script is in current directory."
    _debug_log "Script is $file"
    bool_pwd_check_passed="true"
  else
    _debug_log "Script is Not present in current directory."
    _debug_log "Script is $file"
    bool_pwd_check_passed="false"
    _log_and_show "${_warn} You are not running this script from your current directory."
    _log_and_show "${_notice} For best results run this script from its base directory."
    _log_and_show "${_notice} Your current directory is: $(pwd)"
  fi

}

function  _add_timestamp_to_ppa_logs()
{
  # This function adds time stamp to apt-logs without using external utilities
  # Output will be automatically written to $log_file
  # Usage command | _add_timestamp_to_apt_logs
  while IFS= read -r line; do printf "[$(date)] ${_ppa_logs}\t%s\n" "$line" &>> "$log_file"; done

}

function  _add_timestamp_to_apt_logs()
{
  # This function adds time stamp to apt-logs without using external utilities
  # Pipe the output to this function.
  # Output will be automatically written to $log_file
  # Usage command | _add_timestamp_to_apt_logs
  while IFS= read -r line; do printf "[$(date)] ${_apt_logs}\t%s\n" "$line" &>> "$log_file"; done
}

function  _add_timestamp_to_aptkey_logs()
{
  # This function adds time stamp to apt-add-key-logs without using external utilities
  # Pipe the output to this function.
  # Output will be automatically written to $log_file
  # Usage command | _add_timestamp_to_apt_logs
  while IFS= read -r line; do printf "[$(date)] ${_apt_key_logs}\t%s\n" "$line" &>> "$log_file"; done
}

function  _add_timestamp_to_dpkg_logs()
{
  # This function adds time stamp to dpkg-logs without using external utilities
  # Pipe the output to this function
  # output will be automatically written to $log_file
  # Usage command | _add_timestamp_to_dpkg_logs
  while IFS= read -r line; do printf "[$(date)] ${_dpkg_logs}\t%s\n" "$line" &>> "$log_file"; done
}

function  _add_timestamp_to_cat_logs()
{
  # This function adds time stamp to cat output without using external utilities
  # Pipe the output to this function
  # Output will be automatically written to $log_file
  # Usage command | _add_timestamp_to_cat_logs
  while IFS= read -r line; do printf "[$(date)] ${_cat_logs}\t%s\n" "$line" &>> "$log_file"; done
}

function  _add_timestamp_to_pip_logs()
{
  # This function adds time stamp to pip output without using external utilities
  # Pipe the output to this function
  # Output will be automatically written to $log_file
  # Usage command | _add_timestamp_to_pip_logs
  while IFS= read -r line; do printf "[$(date)] ${_pip_logs}\t%s\n" "$line" &>> "$log_file"; done
}

function  _add_timestamp_to_shellscript_logs()
{
  # This function adds time stamp to shellscript output without using external utilities
  # Pipe the output to this function
  # Output will be automatically written to $log_file
  # Usage command | _add_timestamp_to_shellscript_logs
  while IFS= read -r line; do printf "[$(date)] ${_hooks_logs}\t%s\n" "$line" &>> "$log_file"; done
}


function report_stats()
{
  # Report anonymized stats about the script.
  # Following things are reported.
  # A UUID generated for each execution, (its random and is not persistant across runs)
  # sha-1 sum of Hostname, Total execution time, system architecture,
  # Distro name, feaure selected, last exit code, flags used, if Travis or Docker flags are true,
  # timezone and system language. Nothing else is collected. Period.
  # If you are feaking out, its a shellscript for heaven sake!! You can literally look into it
  # and check what's collected. Why if you ask? Just for fun and improvement of course!.
  # Data will be stored in AWS DynamoDB and Google Firebase Realtime Database.
  # Data will not be shared with any third party. Period. Only me or my team members will have access
  # to it. If you run a search query on google, it probably collects more data than me.
  # API endpoints may log IP addresses (Github, Google and AWS).
  # But I really really don't want to report stats because I use this script at NSA.
  # Well, 1. You should not use this script! There are better tools like Chef and
  #          Ansible for huge deployments.
  #       2. Okay! Okay! just pass --no-stats as an argument and be done ith it &
  #          the script **will not** "phone home".
  true
}

function _script_exit_log()
{
    # Run Post Scripts
    local line
    if [[ "$bool_enable_post_scripts" == "true" ]]; then
      _log_and_show "${_info} Post Scripts in post-script.list will be run"

      # Check pwd flag since script paths are relative.
      if [[ "$bool_pwd_check_passed" == "true" ]]; then
        _debug_log "PWD checks have passed, Proceed with hooks"
        # Function Reads the file ./data/post-script.list and purges the ppa one by one
        while IFS= read -r line
          do
              _log_and_show "${_script} Script : $line..."
              _debug_log "Running: $line"
              if [ "$line" == "" ]; then
                _log_and_show "${_warn} Found and empty line in post-script.list. Moving on to next line"
                continue
              fi
              if bash "$line"  2>&1 | _add_timestamp_to_shellscript_logs  ; then
                _log_and_show "${_script} $line ran successfully."
              else
                _log_and_show "${_oh_no} Some Error occured while running $line."
              fi
          done < "$post_script_list"
      else
        _log_and_show "${_error} $SCRIPT is not in your current directory. Hooks have been disabled."
        _log_and_exit "Not in current directory" "27"
      fi
    fi

    # Script time
    EXEC_END=$(date +%s)
    EXEC_TIME=$((EXEC_END-EXEC_START))

    # report_stats
    # Generage Exit message & log
    _goodbye_msg
    _debug_log "Exiting Script"
    printf "\nFinished %s in %d seconds, on %s.\nLast exit code was: %d\n" "$SCRIPT" "$EXEC_TIME" "$(date)" "$?" | tee -a "$log_file"
    _line_fill >> "$log_file"
}


function run_pre_scripts()
{
  # Run Pre Scripts
  local line
  if [[ "$bool_enable_pre_scripts" == "true" ]]; then
    _log_and_show "${_info} Shell Scripts in pre-script.list will be run"

    # Check pwd flag since script paths are relative.
    if [[ "$bool_pwd_check_passed" == "true" ]]; then
      _debug_log "PWD checks have passed, Proceed with hooks"

      # Function Reads the file ./data/pre-script.list and purges the ppa one by one
      while IFS= read -r line
        do
          _log_and_show "${_script} Script : $line..."
          if [ "$line" == "" ]; then
            _log_and_show "${_warn} Found an empty line in pre-script.list Moving on to next line"
            continue
          fi
          _debug_log "Making $line executable"
          if bash "$line"  2>&1 | _add_timestamp_to_shellscript_logs  ; then
            _log_and_show "${_script} $line ran successfully."
          else
            _log_and_show "${_oh_no} Some Error occured while running $line."
          fi
        done < "$pre_script_list"

      else
        _log_and_show "${_error} $SCRIPT is not in your current directory. Hooks have been disabled."
        _log_and_exit "Not in current directory" "27"
      fi
  fi

}

function _eol_message()
{
  # Display EOL Message and upgrade instruction URLs.
  # Arguments: 2
  # ARG 1: Release Name
  # ARG 2: EOL Date
  set_magenta;
  _log_and_show "${_eol} This version of Ubuntu is no longer supported."
  _log_and_show "${_notice} $1 reached EOL on $2."

   set_yellow;
  _log_and_show "${_notice} Please use a supported version of Ubuntu."
  _log_and_show "${_info} Please visit the link below for information on how to upgrade."

  set_blue;
  _log_and_show "${_info} https://help.ubuntu.com/community/EOLUpgrades."
  _log_and_exit "EOL Release : $code_name" "12";
}


function _fix_ubuntu_derivatives()
{
  # Some Ubuntu based distributions use their own codename (Linux mint, Elementary)
  # Some repositories require that ubuntu codename is used.
  # This function fixes that for
  # Linux mint 17.X : Ubuntu 14.04 Trusty,
  # Linux mint 18.x : Ubuntu 16.04 Xenial,
  # Elementary OS Loki : Ubuntu 14.04 Trusty,
  # Elementary OS Freya and Juno : Ubuntu 16.04 Xenial
  # POP_OS! uses Ubuntu codenames (No need to apply fix)
  # If the release is not known this function exits the script for safety.

  _log_and_show "${_derivatives} Checking for Ubuntu based distributions which use different codename"
  set_yellow;
        _debug_log "Variable code_name is : $code_name"
  case ${code_name} in
      qiana | rebecca | rafaela | rosa )    _log_and_show "${_linuxmint} Release is Linux mint 17.X."
                                            _log_and_show "${_notice} Setting additional repositoris to follow Ubuntu 14.04."
                                            code_name="trusty"
                                            _log_and_show "${_linuxmint} Changed codename to $code_name"
                                            bool_config_partner_repo="false"
                                            ;;
      sarah | serena | sonya | sylvia )     _log_and_show "${_linuxmint} Release is Linux mint 18.X."
                                            _log_and_show "${_notice} Setting additional repositoris to follow Ubuntu 16.04."
                                            code_name="xenial"
                                            _log_and_show "${_linuxmint} Changed codename to $code_name"
                                            bool_config_partner_repo="false"
                                            ;;
      tara )                                _log_and_show "${_linuxmint} Release is Linux mint 19.X."
                                            _log_and_show "${_notice} Setting additional repositoris to follow Ubuntu 18.04."
                                            code_name="bionic"
                                            _log_and_show "${_linuxmint} Changed codename to $code_name"
                                            bool_config_partner_repo="false"
                                            _log_and_exit "${_error} Unfortunately, this release of Linux Mint not yet supported." "17"
                                            ;;
      loki | juno )                         _log_and_show "${_elementary} This release of Elementary OS is based on Ubuntu 16.04 Xenial."
                                            _log_and_show "${_notice} External repositories will use Ubuntu 16.04."
                                            code_name="xenial"
                                            _log_and_show "${_elementary} Changed codename to $code_name"
                                            bool_config_partner_repo="false"
                                            ;;
      freya )                               _log_and_show "${_elementary} This release of Elementary OS is based on Ubuntu 14.04 Trusty."
                                            _log_and_show "${_notice} External repositories will use Ubuntu 14.04."
                                            code_name="trusty"
                                            _log_and_show "${_elementary} Changed codename to $code_name"
                                            bool_config_partner_repo="false"
                                            ;;
      xenial | trusty | artful )            _log_and_show "${_canonical} No known derivative of Ubuntu found or the derivative uses same codename as Ubuntu."
                                            set_default;
                                            _log_and_show "${_info} Keeping the codename as: $code_name."
                                            ;;
      zesty )                               _eol_message "$code_name" "$_eol_date_zesty"
                                            ;;
      #artful )                              _eol_message "$code_name" "July 2018"
      #                                      ;;
      bionic )                              set_yellow
                                            _log_and_show "${_canonical} No known derivative of Ubuntu found or the derivative uses same codename as Ubuntu."
                                            _log_and_show "${_notice} Please use --fix flag if your choice of repos are not available."
                                            ;;
      cosmic  )                             set_magenta;
                                            _log_and_show "${_canonical} No known derivative of Ubuntu found or the derivative uses same codename as Ubuntu."
                                            set_yellow;
                                            _log_and_show "${_pre_release} This is Ubuntu 18.10 Cosmic Canimal"
                                            _log_and_show "${_pre_release} Please use --pre-release flag if you cannot add repos yet. There's no fix for PPAs."
                                            _log_and_show "${_warn} This is a pre-release of Ubuntu Which is in early stages of development. Use with caution"
                                            _log_and_show "${_warn} Packages and PPAs might not work with this release!"
                                            ;;
      *)                                    _log_and_show "${_error} Unknown Distribution/Release."
                                            _log_and_show "${_notice} This Script is not designed to run on this ($code_name) distro/release."
                                            _script_exit_log;
                                            exit 16;
                                            ;;
  esac
  # Assign code_name to code_name_fix_latest used in _fix_repo_not_available
  _debug_log "Assigning Code name to variable code_name_fix_latest as $code_name."
  code_name_fix_latest="$code_name"
  set_default;

}


function _test_internet_connection ()
{
  # Function to check internet connection
  _log_and_show "${_checking} Internet connection..."
  if wget --tries=3 --timeout=15 "$PING_URL" -O /tmp/testinternet &>/dev/null 2>&1; then
    _log_and_show "${_internet} Connected"
    rm -f /tmp/testinternet
  else
    set_yellow;
    _log_and_show "${_oh_no} Booooooo! You are not connected to the Internet!. Please check your Internet connection and try again."
    rm -f /tmp/testinternet
    set_default;
    exit 14;
  fi
}


function  _export_variables()
{
  # Export Variables
  # Export Simulate flag for other scripts
  export AE_SIMULATE="$simulate_apt_install"
  # Export Log file name
  export AE_LOG_FILE="$log_file"
}

function _set_custom_api_nodes ()
{
  # Set custom api endpoints
  if [[ "$bool_custom_api_node" == "true" ]]; then
   _log_and_show "${_info} cutom API node is set."
   api_endpoint="$custom_api_node"
 fi

}


function _get_api_cfg_files()
{
  # Get response
  local exit_status
  api_resp_file="/tmp/after-effects-api-response.txt"
  exit_status=0
  # Get Version Metadata
  wget -q http://"${api_endpoint}"/version -O "$api_resp_file" >> $"$log_file"
  # Check if exit code is zero
  exit_status="$?"
  _debug_log "Exit code from wget  API response is : $exit_status"
  if [ "$exit_status" -eq 0 ]; then
    _debug_log "Successfully retrieved Version & config file."
  else
    _log_and_show "Something went wrong while retrieving response from API endpoint."
    _log_and_exit "Error Getiing response." "28"
  fi
}

function _version_checks ()
{
  # Checks if its running latest version.
  # Also suggest updating to latest version if current version is not latest,
  # Allows to deprecate old version as it can be suggested.
  # Dynamic EOL checks
  _get_api_cfg_files;
  # Check if Version Checks is enabled. (Default is enabled)
  if [ "$bool_check_version" == "true" ]; then
  _debug_log "Version Checks are enabled."

      # Get Version Metadata
      api_rel_num=$( grep "release_number" "$api_resp_file" | cut -f2 -d ':')
      _debug_log "Version from API: $api_rel_num"
      api_rel_blacklisted=$( grep "blacklisted" "$api_resp_file" | cut -f2 -d ':')
      _debug_log "Blacklist falg: $api_rel_blacklisted"
      api_blacklist_fallback=$( grep "blacklist_fallback" "$api_resp_file" | cut -f2 -d ':')
      _debug_log "Blacklist fallback Version: $api_blacklist_fallback"

      # Version Checks
      # If release number is higher tahn one in the script
      # & not is not blacklisted, throw error & ask to update.
      if [ "$api_rel_num" -gt "$REL_NUM" ] && [ "$api_rel_blacklisted" == "false" ]; then
        set_yellow
        _log_and_show "${_warn} A newer release is available. Please download latest release and try again."
        _log_and_show "${_version} You are running $REL_NUM. Latest available version is $api_rel_num."
        _log_and_exit "${_info} You can disable version checks by passing --no-version-checks" "24"
        set_default
      # If Current release number is blacklisted
      # & fallback version is higher than one in the script, throw an error.
      elif [ "$api_blacklist_fallback" -gt "$REL_NUM" ]&& [ "$api_rel_blacklisted" == "true" ]; then
        _log_and_show "${_warn} A newer version is available."
        _log_and_show "${_warn} Currently there are some issues with the latest release."
        _log_and_show "${_notice} Please use the script version ${api_blacklist_fallback} from commit: $( grep "fallback_commit" "$api_resp_file" | cut -f2 -d ':')"
        _log_and_exit "${_info} You can disable version checks by passing --no-version-checks" "30"
      elif [ "$api_rel_num" -eq "$REL_NUM" ]; then
        _log_and_show "${_version} You are running the latest version of script."
      elif [ "$api_rel_num" -lt "$REL_NUM" ]; then
        _log_and_show "${_info} Hey Time traveller! You seem to be running a development version of script."
        _log_and_show "${_info} You are running $REL_NUM. Latest stable version is $api_rel_num."
      fi

      # Check if Blacklist is true
      if [ "$api_rel_blacklisted" == "true" ]; then
        set_yellow
        _log_and_show "${_error} This release has serious issues and has been blacklisted."
        _log_and_show "${_warn} Reason: $( grep "blacklist_msg" "$api_resp_file" | cut -f2 -d ':')"
        _log_and_exit "${_info} In the meantime, please use script from tree:  $( grep "fallback_commit" "$api_resp_file" | cut -f2 -d ':')" "25"
        set_default
      else
        _log_and_show "${_version} Release is Good."
      fi

  # If version checks have been disabled
  else
    _log_and_show "${_info} Version checks have been disabled."
  fi
  #sleep 5

}

function _get_remote_config()
{

    # Server side flags
    _get_api_cfg_files;
    # Report usage flag
    if [ "$bool_report_stats" == "true" ]; then
      api_report_usage=$(grep "report_usage" "$api_resp_file" | cut -f2 -d ':')
      if [ "$api_report_usage" == "false" ]; then
        bool_report_stats=false;
        _log_and_show "${_info} Usage reporting is disabled by server side flag."
      else
        _log_and_show "${_info} Usage reporting is defined by user flag."
      fi

      # Stats node
    api_report_endpoint=$(grep "usage_node" "$api_resp_file" | cut -f2 -d ':')
  else
    _log_and_show "${_info} Report stats is set to false will also disable remote config."
  fi
}


function _test_conflicting_apps ()
{
  # Function checks if any apps like syanptic aptitude are running.
  local lock
  _log_and_show "${_conflicts} Checking..."
  for lock in synaptic update-manager software-center apt-get dpkg aptitude
  do
    # shellcheck disable=SC2009
    if ps -U root -u root u | grep $lock | grep -v grep > /dev/null;
       then
         _log_and_show "${_aptrunning} Installation won't work. Please close $lock first then try again."
         _script_exit_log
         exit 15;
       else
        _debug_log "$lock not is running."
     fi
   done
   _log_and_show "${_conflicts} None detected."
   sleep 5
}

function _show_confirmation_dialog_for_tasks()
{
  # Function to confirm whether action selected should be perfromed or not.
  # Accepts 3 arguments
  # ARG-1 Name of the task/function selected
  # ARG-2 Message to be displayed in confirmation box
  # ARG-3 name of the function to execute
  # Depends on whiptail
  # To overide and say yes to all dialog pass -y as command line option while running the script.
  local name_of_task="$1" #Name of the task to be perfromed
  local confirm_msg="$2" #Message shown in Confirmation dialogue
  local exec_function="$3" #Function to run if user selected yes
  COLUMNS=$(tput cols)
  LINES=$(tput lines)
  export COLUMNS LINES
  if [ "$bool_say_yes_to_all" != "true" ]; then
    _debug_log "Confirmation dialog is Necessary to get user approval to make changes for: $exec_function."
    # shellcheck disable=SC2086
    if (whiptail  --title "$name_of_task" --yesno "$confirm_msg" $LINES $COLUMNS $(( LINES - 12 ))) then
        _debug_log "User selected yes, Proceed with $name_of_task"
        # execute the function
        _debug_log "Executing: $exec_function"
        $exec_function;
    else
        _debug_log "Selected No for $name_of_task , Returning to Main menu."
        _process_opts;
    fi
  elif [ "$bool_say_yes_to_all" = "true" ]; then
    _debug_log "Yes to all: No confirm dialogs to be displayed."
    _debug_log "Executing: $exec_function"
    $exec_function;
  else
    _debug_log "Illegal value for bool_say_yes_to_all."
  fi
}


function _install_pre_requisites()
{
  # This function installs required packages for adding apt repositories
  # These should be present in your base ubuntu instal. If not present then, this function
  # will install them.
  # Following are the packages installed by this function:
  # linux-image-extra-<>, apt-transport-https, ca-certificates,
  # curl, software-properties-common
  _log_and_show "${_installing} Necessary dependencies..."
  _debug_log "${_installing} apt-transport-https, ca-certificates, curl, software-properties-common ppa-purge."
   apt-get -y install apt-transport-https \
    ca-certificates \
    curl \
    ppa-purge\
    software-properties-common 2>&1 | _add_timestamp_to_apt_logs  || _log_and_exit "${_failed} Installing dependencies. Script cannot continue!!" "21"
  _log_and_show "${_installed} Necessary dependencies."

  # Honor -k flag
  # Delete DEBs
  if [ "$bool_preserve_debs" == "true" ];then
    _log_and_show "${_deleting}APT Cached Packages"
    apt clean | _add_timestamp_to_apt_logs
  else
    _debug_log "Keeping cahed APT Packages"
  fi
}


function _fix_repo_not_available()
{
  # If repository is not available for latest ubuntu release, this uses last stable release
  # (may not be LTS) for adding repository
  if [ "$bool_fix_repo_not_available_for_latest" == "true" ]; then
    # Only do this on latest releases
    if [ "$code_name" == "$code_name_latest_release" ]; then
      _debug_log "Sometimes repositories are not available for latest ubuntu release.\nUsing last known stable release: $code_name_latest_release."
      printf "${YELLOW}${_new_release} Using repositories from an older release: $codename_previous_release is being used.\n"
      printf "${YELLOW}${_new_release} You need to modify this in Software and updates when it becomes available for ${code_name_latest_release}.\n${NC}"
      code_name_fix_latest="$codename_previous_release"
    else
      _debug_log "This release has repositories available. Flag --fix will be ignored."
    fi
  else
    _debug_log "Feature fix_repo_not_available is disabled."
fi
}


function _fix_repo_not_available_upcoming_release()
{
  # If repository is not available for upcoming ubuntu release, this uses last stable release or one release before that
  # Aka if the pre-release release is 18.04 it might use 17.04 (Only for first month or two) till repositories become available for the release 17.10)
  # (may not be LTS) for adding repository.

  # Only do this on upcoming-release
  if [ "$code_name" == "$codename_upcoming_release" ]; then

    # check for fix-pre-release flag
    if [ "$bool_fix_repo_not_available_for_upcoming_release" == "true" ]; then
      _log_and_show "${_pre_release} Previously available repositories from an older release is being used."
      printf "${_pre_release}You need to modify this in Software and Updates when it becomes available for ${codename_upcoming_release}${NC}\n"
        # If the repositories are  not available for latest stable release as well, go back a release.
        # Eg. If the pre-release is 18.04 and the repo is not available for 17.10 as well, we use 17.04 repositories.
        # Usually happens in first few days of development cycle of 18.04.
        if [ "$bool_fix_repo_not_available_for_latest" == "true" ]; then
          # We need to use repositories for previous stable release.
          _log_and_show "${_pre_release} Both falgs for --pre-release and -fix are set. Using codename: $codename_previous_release"
          code_name_fix_latest="$codename_previous_release"
        else
          # No need to apply fix for latest release, We can use latest stable release repositories
          _log_and_show "${_pre_release} Using repositories for current stable release: $code_name_latest_release"
          code_name_fix_latest="$code_name_latest_release"
          code_name="$code_name_latest_release"
        fi
    else
        _debug_log "Feature fix_repo_not_available_upcoming_release is disabled."
    fi
  else
    _debug_log "This release is not an upcoming-release. Flag --pre-release will be ignored."
fi
}


function add_ppas()
{
  # Function to add ppa by reading ppas from ppa.list file in /data directory.
  # List file should contain ppas in following format
  # ppa:ppa:<author>/<ppa> for example, ppa:mozillateam/firefox-nex for adding firefox next/Beta PPA
  _debug_log "Adding PPA Fucntion"
  local line;
  # Function Reads the file ./data/ppa.list and adds the ppa one by one.
  # Install dependencies required
  _install_pre_requisites;

    while IFS= read -r line
      do
           _line_fill >> "$log_file"
           _log_and_show "${_adding_ppa} $line"
           _debug_log "Adding: $line"
           # Check for empty lines
           if [ "$line" == "" ]; then
             _log_and_show "${_warn} Found and empty line in ppa.list. Moving on to next line"
             continue
           fi
           _debug_log "Add PPA Log Below"
           if add-apt-repository -y "$line" 2>&1 | _add_timestamp_to_ppa_logs ; then
             _log_and_show "${_added_ppa} $line successfully."
           else
             _log_and_show "${_oh_no} Some Error occured while adding $line. Ignoring and moving on.\n"
           fi
           _line_fill >> "$log_file"
      done < "$ppa_list"
      set_yellow;
      _log_and_show "${_added} PPAs in the list file."
      set_default;
}


function add_repositories()
{
  # This function adds repositories for several apps like
  # Google Chrome, Spotify, Google Cloud SDK, GCSFUSE(Part of google cloud),
  # Skype, Docker, Skype, Microsoft Visual Studio Code, Google Earth, Insync client, WineHQ etc
  # WARNING: Some repositories might not support latest version of Ubuntu.
  # ${code_name_fix_latest} is used in known cases where a repository might be unavailable for latest Ubuntu Release

  local CLOUD_SDK_REPO
  local GCSFUSE_REPO
  local exit_status
  # install dependencies required
  _install_pre_requisites;
  # if repository is not available for latest ubuntu release, use previous release
  # Be careful, things might not be compatible
  _fix_repo_not_available_upcoming_release;
  _fix_repo_not_available;
  _debug_log "Adding External Repositories"

  # Add Google Chrome and Google Earth
  _log_and_show "${_adding} Google repositories"
  if [ "$ARCH" == "amd64" ]; then
      _debug_log "Adding Google package siging Key"
    wget -q  https://dl.google.com/linux/linux_signing_key.pub -O linux_signing_key.pub >> $"$log_file"
    _debug_log "Adding Google key to trusted keys list"
    apt-key add linux_signing_key.pub 2>&1 | _add_timestamp_to_aptkey_logs || _log_and_show "Adding trusted keys for Google failed."
    _log_and_show "${_adding} Google Chrome repository"
    echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main #Google-Chrome" > ${SOURCES_FILE_DIR}/google-chrome.list || _log_and_show "Adding Google Chrome Repository failed"
    _log_and_show "${_adding} Google Earth repository"
    echo "deb [arch=amd64] http://dl.google.com/linux/earth/deb/ stable main #Google-Earth" > ${SOURCES_FILE_DIR}/google-earth.list || _log_and_show "Adding Google Chrome repository failed"
  else
    _log_and_show "Architecture: $ARCH is not supported for Chrome. Please use Chromium"
  fi

  # Spotify client
  _log_and_show "${_adding} Spotify repository"
  _debug_log "Adding Spotify keys"
  apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0DF731E45CE24F27EEEB1450EFDC8610341D9410  2>&1 |_add_timestamp_to_aptkey_logs  || _log_and_show "Adding Spotify repository failed"
  echo "deb http://repository.spotify.com stable non-free #Spotify For Linux" > ${SOURCES_FILE_DIR}/spotify.list || _log_and_show "Adding Spotify Repository Failed"

   # Insync
  _log_and_show "${_adding} Insync repository"
  _debug_log "Adding Insync keys"
  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ACCAF35C  2>&1 |_add_timestamp_to_aptkey_logs || _log_and_show "Adding Insync Repository failed"
  echo "deb http://apt.insynchq.com/ubuntu $code_name_fix_latest non-free contrib #Insync Client" > ${SOURCES_FILE_DIR}/insync.list || _log_and_show "Adding Insync Repository failed"

  # Google Cloud SDK and GCS-FUSE
  CLOUD_SDK_REPO="cloud-sdk-$code_name_fix_latest"
  GCSFUSE_REPO="gcsfuse-$code_name_fix_latest"
  _log_and_show "${_google_cloud} Repositories"
  _debug_log "Adding Google-Cloud repository sigining key"
  wget -q https://packages.cloud.google.com/apt/doc/apt-key.gpg >> "$log_file"
  apt-key add apt-key.gpg 2>&1 | _add_timestamp_to_aptkey_logs
  _log_and_show "${_adding} Google-Cloud-SDK repository"
  echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main #Google Cloud SDK" > ${SOURCES_FILE_DIR}/google-cloud-sdk.list  || _log_and_show "Adding GCSFUSE Repository failed"
  _log_and_show "${_adding} GCSFUSE repository"
  echo "deb http://packages.cloud.google.com/apt $GCSFUSE_REPO main #GCSFUSE" > ${SOURCES_FILE_DIR}/gcsfuse.list  || _log_and_show "Adding Google Cloud SDK Repository failed"

  #AWS
  # Handled by pip

  #Wine HQ
  if [ "$add_winehq_repo" == "true" ]; then
    _debug_log "Adding WINWHQ is set to true"
    _log_and_show "${_adding} WineHQ repository"
    _debug_log "Getting WineHQ repository Key"
    wget -q https://dl.winehq.org/wine-builds/Release.key -O wine-hq-sigining-key.key >> "$log_file"  2>&1
    _debug_log "Adding WineHQ key"
    apt-key add wine-hq-sigining-key.key 2>&1 | _add_timestamp_to_aptkey_logs || _log_and_show "Adding WineHQ keys failed"
    _debug_log "Adding WineHQ repository"
    echo "deb https://dl.winehq.org/wine-builds/ubuntu/ $code_name_fix_latest main #WineHQ" > ${SOURCES_FILE_DIR}/winehq.list || _log_and_show "Adding WineHQ repository failed"
  else
    _log_and_show "${_adding} WineHQ repository is set to false. Skipping."
  fi

  # Docker CE
  if [ "$add_docker_repo" == "true" ]; then
    _debug_log "Adding Docker repository is set to true"
    _log_and_show "${_adding} Docker-CE repository"
    _debug_log "Getting Docker-CE repository Key"
    wget -q https://download.docker.com/linux/ubuntu/gpg -O docker-key.gpg >> "$log_file"  2>&1
    _debug_log "Adding Docker repository key"
    apt-key add docker-key.gpg 2>&1 | _add_timestamp_to_aptkey_logs || _log_and_show "Adding Docker-CE keys failed"
    _debug_log "${_added} Docker-CE"
    echo "deb [arch=$ARCH] https://download.docker.com/linux/ubuntu  $code_name_fix_latest stable #Docker-Community-Edition" > ${SOURCES_FILE_DIR}/docker.list || _log_and_show "Adding Docker-CE repository failed"
  else
    _debug_log "Adding Docekr-CE repository is set to false. Skipping."
  fi

  # Skype
  _log_and_show "${_adding} Skype for Linux repository"
  _debug_log "Getting Skype repository key"
  wget -q https://repo.skype.com/data/SKYPE-GPG-KEY -O skype-linux-key.gpg >> "$log_file"
  _debug_log "Adding Skype keys to trusted list"
  apt-key add skype-linux-key.gpg 2>&1 | _add_timestamp_to_aptkey_logs || _log_and_show "Adding Skype for linux key failed"
  echo "deb [arch=$ARCH] https://repo.skype.com/deb stable main #Skype for Linux" > $SOURCES_FILE_DIR/skype-stable.list || _log_and_show "Adding Skype for linux repository failed"


  # Visual Studio Code
  if [ "$ARCH" == "amd64" ]; then
    _log_and_show "${_adding} Visual Studio Code repository"
    _debug_log "Getting GPG keys for repository"
    curl -s https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
    _debug_log "Adding Key to trusted GPG keys directory"
    apt-key add microsoft.gpg 2>&1 | _add_timestamp_to_aptkey_logs || _log_and_show "Adding Visual Studio Code key failed"
    echo "deb [arch=$ARCH] https://packages.microsoft.com/repos/vscode stable main #Visual-Studio-Code" > ${SOURCES_FILE_DIR}/vscode.list
  else
    _log_and_show "Architecture: $ARCH is not supported by Visual studio Code."
  fi

  # Signal App
  if [ "$ARCH" == "amd64" ]; then
    _log_and_show "${_adding} Signal repository"
    wget -q https://updates.signal.org/desktop/apt/keys.asc -O signal.asc >> "$log_file"
    apt-key add signal.asc  2>&1 | _add_timestamp_to_aptkey_logs || _log_and_show "Adding Signal Key Failed"
    echo "deb [arch=amd64] https://updates.signal.org/desktop/apt xenial main #Signal-for-Desktop"  > ${SOURCES_FILE_DIR}/signal-xenial.list
  else
      _log_and_show "Architecture: $ARCH is not supported by Signal"
  fi

    # Mendeley Desktop App
  if [ "$add_mendeley_repo" == "true" ]; then
    _log_and_show "${_adding} Mendeley repository"
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 6F036044 2>&1 | _add_timestamp_to_aptkey_logs || _log_and_show "Adding Mendeley Desktop Key Failed"
    echo "deb https://desktop-download.mendeley.com/download/apt stable main #Mendeley-Desktop"  > ${SOURCES_FILE_DIR}/mendeleydesktop.list
  else
      _log_and_show "${YELLOW}${_adding} Mendeley Desktop is set to false.${NC}"
  fi


  # Enable Canonical Partner repos
  if [ "$bool_config_partner_repo" != "false" ]; then
    _debug_log "Release is Ubuntu. Enabling Canonical partner repository"
    _log_and_show "${_adding} Canonical partner repositoris"
    add-apt-repository "deb http://archive.canonical.com/ubuntu $code_name partner" >> "$log_file"
  else
    _log_and_show "${_warn} This is Linux Mint/Elementary. Since they have different way of configuring partner repositoris, leaving it unchanged."
  fi


  # Remove artifacts and keys
  _debug_log "Removing keys and converted files from current directory"
  rm  -f ./*.gpg ./*.asc ./*.pub ./Release  ./*.Release ./*.key ./*.pub.* ./*.asc.* ./*.key.* ./*.gpg.* >> "$log_file"

}


function update_repos()
{
  local exit_status
  set_yellow
  _log_and_show "${_updating} Repository index/metadata..."
  set_default
  apt-get update 2>&1 | _add_timestamp_to_apt_logs
  exit_status=$?
  set_yellow;
  if [ "$exit_status" -eq 0 ]; then
    _log_and_show "${_updated} Repository metadata successfully!"
  else
    set_yellow;
    _log_and_show "${_oh_no} Something went wrong in upgrading packages. Please see the log file for more details."
    _log_and_show "${_notice} Most of the times its either missing repository keys or wrongly configured repositories."
  fi
  set_default;
}


function upgrade_apps()
{
  # This function will list upgradable apps and upgrade it.
  # IF Simulate is set to true this will only list the apps but no upgrade action will be performed.
  local exit_status
  _log_and_show "${_upgrading} Packages"
  _debug_log "Listing Upgradable packages"
  _line_fill;
  # upgradable is not available in apt-get ignore warning about apt being unstable
  apt list --upgradable 2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "Something went wrong while listing upgradable packages. Please see the log file for more details."
  set_yellow;
  _debug_log "The above list of packages will be upgraded!"
  sleep 5;
  set_default;
  sleep 5
  _debug_log "${_upgrading} packages..."
  # only do upgrades if simulate is set to false
  if [ "$simulate_apt_install" == "false" ]; then

    DEBIAN_FRONTEND=noninteractive apt-get -y upgrade | _add_timestamp_to_apt_logs
    DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::='--force-confold' --force-yes -fuy dist-upgrade | _add_timestamp_to_apt_logs
    exit_status=$?
  else
    # If  simulate is true, set exit status as 0
    # Simulate flag skips the section above. No point in Checking for exit status
    _log_and_show "${_simulate} is set to True. Not performing upgrade!"
    exit_status=0
  fi
  set_yellow;
  if [ "$exit_status" -eq 0 ]; then
    _log_and_show "${_upgraded} Successfully!"
  else
    _log_and_show "${_oh_no} Something went wrong while upgrading packages."
    _log_and_show "${_notice} Please see the log file for more details. Most of the times its either missing repositories or wrongly configured repositories."
  fi
  set_default;
}


function  upgrade_system()
{
  _debug_log "Updating and upgrading packages"
  update_repos;
  upgrade_apps;
}

function disable_external_repos()
{
  # Function to disable external repositoris added by this script.
  # PPAs added or repositoris added by actions other than this script are not removed.
  # Repositoris added by dpkg pist install hooks and deb files will not be removed!!
  # Simulate option has no effect on this function. PPAs will be purged irrespective of its value.
  local exit_status
  local old_path
  _log_and_show "${_deleting} External repositoris"
  _install_pre_requisites;

  # Function Reads the file ./data/ppa.list and purges the ppa one by one
    while IFS= read -r line
      do
           _log_and_show "${_purging} $line..."
           _debug_log "Purging: $line"
           if ppa-purge -y "$line"  2>&1 | _add_timestamp_to_apt_logs  ; then
             sleep 10 #wait sometimes apt lock isnt released soon.
             _log_and_show "${_purged} $line successfully."
           else
             _log_and_show "${_oh_no} Some Error occured while purging $line."
           fi
      done < "$ppa_list"
      set_yellow;
    _log_and_show "${_purged} External PPAs."

    # Remove keys and list files.
    _log_and_show "${_deleting} Keys and external repositoris"
    set_default
    old_path=$(pwd)
    _log_and_show "${_deleting} Google signing key   7FAC5991"
    apt-key del 7FAC5991  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  Google signing key -1 failed."
    _log_and_show "${_deleting} Google signing key   D38B4796"
    apt-key del D38B4796  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  Google signing key -2 failed."
    _log_and_show "${_deleting} Webupd8 signing key  4C9D234C"
    apt-key del 4C9D234C  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  Webupd8 failed."
    _log_and_show "${_deleting} Spotify signing key  4C9D234C"
    apt-key del D2C19886  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  Spotify signing key -2 failed."
    _log_and_show "${_deleting} Spotify signing key  341D9410"
    apt-key del 341D9410  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  Spotify signing key -2 failed."
    _log_and_show "${_deleting} Skype signing key    DF7587C3"
    apt-key del DF7587C3  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  Skype for Linux keys failed."
    _log_and_show "${_deleting} WineHQ signing key   5FCBF54A"
    apt-key del 5FCBF54A  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  WineHQ keys failed."
    _log_and_show "${_deleting} Google Cloud key     A73170BF"
    apt-key del A73170BF  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  Google Cloud keys failed."
    _log_and_show "${_deleting} InSync signing key   ACCAF35C"
    apt-key del ACCAF35C  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  InSync keys failed."
    _log_and_show "${_deleting} Docker signing key   0EBFCD88"
    apt-key del 0EBFCD88  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  Docker-CE keys failed."
    _log_and_show "${_deleting} VS-Code signing key  BE1229CF"
    apt-key del BE1229CF  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  Visual Studio Code keys failed."
    _log_and_show "${_deleting} Signal signing key   57F6FB06"
    apt-key del 57F6FB06  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  Signal keys failed."
    _log_and_show "${_deleting} Mendeley signing key 6F036044"
    apt-key del 57F6FB06  2>&1 | _add_timestamp_to_aptkey_logs  || _log_and_show "${_deleting}  Mendeley Desktop keys failed."
    _log_and_show "${_removing} External Repositoris"
    _debug_log "${_removing} *.list and *.save files from ${SOURCES_FILE_DIR}"
    cd /etc/apt/sources.list.d && rm  -f google-chrome.* google-earth.* skype-stable.* spotify.* insync.* google-cloud-sdk.* gcsfuse.* docker.* winehq.* vscode.* signal-xenial.* mendeleydesktop.*
    exit_status=$?
    set_yellow;
    if [ "$exit_status" -eq 0 ]; then
      _log_and_show "${_removed} Additional APT keys and repositories."
      _log_and_show "${_notice} Canonical partner repository was left unchanged."
    else
      _log_and_show "${_oh_no} Failed to remove all or some of the list files or keys in Sources directory."
      set_blue
      _log_and_show "${_notice} Please see the log file for more details."
    fi
    set_default;
    cd "$old_path" || return
    _log_and_show "${_removed} PPAs and Repositories. Please check the logs for errors."

}

function purge_not_required()
{
  # This function purges not required packages from the list ./data/purge.list
  # A flag -d MUST be passed for this option to work
  # Not passing a flag and choosing purge will result in error and acrion being aborted.
  # Simulate is not properly tested and use it with caution!
  # Combination of simulate and purge is UNSTABLE
  # You can modify -d requirement by setting the d_flag_passed=true
  # No validation/checks are done on the list file.
  # Action is dangerous if used carelessly eg. If you are stupid and remove say sudo (why would you??)

  local exit_status
  local packages line
  if [ "$bool_purge_not_required_pkgs" == "true" ]; then
    # check if the file exists
    if [ -e "$purge_list" ]; then
      _debug_log "purge_list exists"
           _log_and_show "${_purging} packages from list :$purge_list:"
           # shellcheck disable=SC2002
           # just to print it in logs so ignore shellcheck
           cat "$purge_list" | _add_timestamp_to_cat_logs
           packages=$(cat "$purge_list")
           # Check if simulate is true
           if [ "$simulate_apt_install" == "true" ]; then
             set_yellow;
             _log_and_show "${_simulate} No packages will be purged!!"
             set_default;
             # disable shellcheck for quoted variable as its an exception
             # quoting $packages leads to errors.
             # shellcheck disable=SC2086
             apt-get -y remove --purge --dry-run $packages 2>&1 | _add_timestamp_to_apt_logs
           else
           # shellcheck disable=SC2086
             apt-get -y purge $packages 2>&1 | _add_timestamp_to_apt_logs
           fi
           exit_status=$?
           set_yellow
           if [ "$exit_status" -eq 0 ]; then
             _log_and_show "${_purged} packages in the list successfully."
           else
             _log_and_show "${_oh_no} Something went wrong while purging packages in $purge_list"
             set_blue;
             _log_and_show "${_notice} Please see the log file for more details."
         fi
      else
      _log_and_show "${_error} purge.list file not found!"
    fi
  else
    set_yellow
    _log_and_exit "${_error} Purge switch is set to false. Did you pass -d along wth the command?" "20"
  fi
set_default

}



function install_apps()

{
  # Function to install apps mentioned in individual list files mentioned in master lisy app-list.list
  # Repositories manually added get their own list file because they are prone to errors
  # This function reads from list of lists
  # File ./data/app-list.list contains list of list files in ./data/ directory
  # which contain package names of the packages to be installed.
  #
  # external-repo should always be at last to avoid any errors in previous lists.
  # No checks are being made on any of the files for validity. One entry per line is recommended.
  # If a package is not available entire collection in the file *.list will not be installed!!

  # Accept some EULA
  update_repos;
  echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true |  debconf-set-selections
  #Install starts here
  local packages
  local exit_status line

  while IFS= read -r line
    do
         _log_and_show "${_installing} packages from list :$line:"
         _debug_log "$line\n"
         # shellcheck disable=SC2002
         # just to print it in logs so ignore shellcheck
         cat "$dir/$line" 2>&1 | _add_timestamp_to_cat_logs
         packages=$(cat "$dir/$line")
         [[ -z "$packages" ]] && _log_and_show "package list to install is empty!!" && continue;
         # Check if simulate is true
         if [ "$simulate_apt_install" == "true" ]; then
           set_yellow;
           _log_and_show "${_simulate} No packages will be installed!!"
           set_default;
           # disable shellcheck for quoted variable as its an exception
           # quoting $packages leads to errors.
           # we need user to see errors, dont redirect stderr
           # shellcheck disable=SC2086
           apt-get -y install -s $packages | _add_timestamp_to_apt_logs
         else
           # shellcheck disable=SC2086
           apt-get -y install $packages | _add_timestamp_to_apt_logs
         fi
         exit_status=$?
         if [ "$exit_status" -eq 0 ]; then
           set_yellow
           _log_and_show "${_installed} packages in the list $line."
         else
           _log_and_show "${_oh_no} Something went wrong while installing packages in $line."
           set_blue;
           _log_and_show "${_notice} Please see the log file for more details."
       fi
         set_default;
         unset packages;
    done < "$app_list_list"

    # Delete DEBs
    if [ "$bool_preserve_debs" == "true" ];then
      _log_and_show "${_deleting}APT Cached Packages"
      apt clean | _add_timestamp_to_apt_logs
    else
      _debug_log "Keeping cahed APT Packages"
    fi

}


function _install_pip_python()

{
  # Function to install python pip packages
  # This function reads from File ./data/pip.list contains list python packages to be installed system wide.
  # Arguments : Two
  # ARG1 : pip package list
  # ARG2 : 2 for python 2 and
  #      : 3 for Python 3.

  #Check args
  if [ $# -lt 2 ] ||  [ $# -gt 2 ] ; then
    set_yellow;
    _log_and_show "${_error} Not enough arguments. \n${_info} Usage: _check_and_install_pre_requisites <list.apt> <commands to check>\n" && \
    _log_and_exit "Internal Function Error. Invalid number of Arguments: $#." "18";
  fi;

  update_repos;
  set_default;
  #Install starts here
  local pip_dependency_list exit_status _disp_pip_ver pip_command dependency_packages pip_loc
  local pip_list="${1}"
  local pip_ver="${2}"
  _debug_log "Option: Install Python Packaes via PIP, Function name: _install_pip_python"
  _debug_log "pip Version : ${pip_ver}, List File : ${pip_list}"

  # Check Python Version
  case ${pip_ver} in
              2 | 2.7 | python2 )         _disp_pip_ver="${_pip_python_2}"; pip_dependency_list="pip-dep.apt"; pip_command="pip";;
        3 | 3.6 | 3.5 | python3 )         _disp_pip_ver="${_pip_python_3}"; pip_dependency_list="pip3-dep.apt"; pip_command="pip3";;
                              * )         _log_and_exit "Internal Function Error. Arguments for python version." "19";;
  esac

  _log_and_show "${_checking} Dependencies for Python: ${pip_ver}"
  # Check if `python-pip` is installed, if not install it
  if ! pip_loc="$(type -p "$pip_command")" || [[ -z $pip_loc ]]; then
      set_red
      _log_and_show "${_warn} $pip_command is not installed!${NC}"
      set_default
      _log_and_show "${_installing} packages from list : $pip_dependency_list"
      # shellcheck disable=SC2002
      cat "$dir/data/$pip_dependency_list" 2>&1 | _add_timestamp_to_cat_logs
      dependency_packages=$(cat "$dir/data/$pip_dependency_list")

      # If Dependency list is empty exit the script
      if [[ -z "$dependency_packages" ]]; then
        set_red;
        _log_and_exit "${_error} PIP dependency list: $pip_dependency_list is empty." "19";
      fi

      # Check if simulate flag is set
      if [ "$simulate_apt_install" == "true" ] && [ "$TRAVIS" != "true" ]; then
        set_yellow;
        _log_and_show "${_simulate} No Dependencies will be installed!!"
        set_default;
        # shellcheck disable=SC2086
        apt-get -y install -s $dependency_packages 2>&1 | _add_timestamp_to_apt_logs
      else
        # shellcheck disable=SC2086
        apt-get -y install $dependency_packages 2>&1 | _add_timestamp_to_apt_logs
      fi
      exit_status=$?

      if [ "$exit_status" -eq 0 ]; then
        set_yellow
        _log_and_show "${_installed} packages in the list $pip_dependency_list."
      else
        set_yellow;
        _log_and_show "${_oh_no} Something went wrong while installing dependencies."
        _log_and_show "${_error} Python packages cannot be installed without dependencies."
        set_default;
        _log_and_exit "${_notice} Please see the log file for more details." "23"
      fi
  else
    _log_and_show "${_info} Dependency already satisfied."
  fi
  # reset exit status & color
  exit_status=0
  set_default;


  _log_and_show "${_disp_pip_ver} Installing python packages from : ${pip_list}"
  # shellcheck disable=SC2002
  # just to print it in logs so ignore shellcheck
  cat "$dir/data/$pip_list" 2>&1 | _add_timestamp_to_cat_logs
  # Check if pip package list is empty
  pip_packages=$(cat "$dir/data/$pip_list")
  if [[ -z "$pip_packages" ]]; then
    set_yellow;
    _log_and_show "${_error} Package lists file ${pip-list} is empty!";
    set_default;
  else
    # I package list isn't empty proceed to install pip packages
    # Check if simulate is true & is not running on TRAVIS.
    if [ "$simulate_apt_install" == "true" ] && [ "$TRAVIS" != "true" ]; then
      set_yellow;
      _log_and_show "${_disp_pip_ver} PIP does not support simulated installs. Not performing install."
      set_default;
    else
      pip install --no-cache-dir-r "${dir}/data/${pip_list}" 2>&1 | _add_timestamp_to_pip_logs
    fi
    exit_status=$?
    if [ "$exit_status" -eq 0 ]; then
      set_yellow
      _log_and_show "${_disp_pip_ver} Installed packages from ${pip_list}"
    else
        set_yellow;
        _log_and_show "${_disp_pip_ver} Something went wrong while installing packages in $pip_list."
        set_blue;
        _log_and_show "${_notice} Please see the log file for more details."
    fi
  fi

  ## honor --keep-debs -k flags
  # Delete DEBs
  if [ "$bool_preserve_debs" == "true" ];then
    _log_and_show "${_deleting}APT Cached Packages"
    apt clean | _add_timestamp_to_apt_logs
  else
    _debug_log "Keeping cahed APT Packages"
  fi
  set_default;
}



function install_pip_packages_2()
{
  # Install Python 2 packages
  _install_pip_python "pip.list" "2"
}


function install_pip_packages_3()
{
  # Install Python 2 packages
  _install_pip_python "pip3.list" "3"
}

function install_debs ()
{

  # Function to get the deb files from DEB_URL in the ./data/deb_files.list
  # The list file has following format
  # URL to get the deb file  <space or tab> NAME_OF_THE_APP(without spaces)

  local deb_url line deb_name
  local exit_status
  _debug_log "Option: Install DEB Files, Function name: install_debs"
    while IFS= read -r line
      do
           _debug_log "$line"
           deb_url=$(echo "$line" | cut -d ' ' -f1 )
           deb_name=$(echo "$line" | cut -d ' ' -f2 )
           _debug_log "DEB file url: $deb_url"
           _debug_log "DEB file name: $deb_name"
           _log_and_show "${_downloading} $deb_name"
           wget -q "$deb_url" -O "${deb_name}" >> "$log_file"

           _log_and_show "${_installing} $deb_name..."
           # Check if simulate is true
           if [ "$simulate_apt_install" == "true" ]; then
             set_yellow
             _log_and_show "${_simulate} $deb_name Installation!!"
             set_default
             dpkg -i --dry-run "$deb_name" 2>&1 | _add_timestamp_to_dpkg_logs
             _debug_log "$_installing missing packages..."
             apt-get -y install -f 2>&1 | _add_timestamp_to_apt_logs
             exit_status=$?
            else
              dpkg -i "$deb_name" 2>&1 | _add_timestamp_to_dpkg_logs
             _debug_log "$_installing missing packages..."
              apt-get -y install -f 2>&1 | _add_timestamp_to_apt_logs
              exit_status=$?
           fi

            # shellcheck disable=SC2181
           if [ "$exit_status" = "0" ]; then
                _log_and_show "${_installed} $deb_name successfully."
           else
                _log_and_show "${_oh_no} Some error occured during downloading and installing $line."
                $?="0"
          fi
      done < "$deb_files_list"

      # Delete DEBs
      if [ "$bool_preserve_debs" == "true" ];then
        _log_and_show "${_deleting} Downloaded DEB Packages"
        rm -f ./*.deb ./*.DEB ./*.deb.* ./*.DEB.* >> "$log_file"
      else
        _debug_log "Keeping Downloaded DEB Packages"
      fi

}




function all_in_one()
{
  #Wrapper for all options
  set_yellow;
  _debug_log "Option: ALL IN ONE, function name: all_in_one"
  _line_fill;
  set_blue;
  _log_and_show "${_info} Apps will be installed, Upgrades and repositoris and will be added, deb files will be downloaded and installed!\n${_info} This action is not reversible in all cases."
  set_default;
  #update_repos;
  #upgrade_apps;
  #add_ppas;
  #add_repositories;
  #install_apps;
  #install_debs;
  #install_pip_packages_2;
  #install_pip_packages_3;
  set_yellow;
  _line_fill;
  set_default;
}


function _process_opts
{
  local whiptail_exitstatus
  _debug_log "Processing Options"
  COLUMNS=$(tput cols)
  LINES=$(tput lines)
  export COLUMNS LINES
  # shellcheck disable=SC2086
  task=$(whiptail \
      --notags \
      --backtitle "$SCRIPT" \
      --title "Ubuntu Post-Install Script" \
      --menu "\nWhat would you like me to do?\nLogs will be written to ./after-effects-logs/after-effects.log.\nCheck the logs for details and errors." \
      --cancel-button "Quit" \
      $LINES $COLUMNS $(( LINES - 12 )) \
      update_repos           'Update Repository Metadata' \
      upgrade_system         'Upgrade packages' \
      all_in_one             'Add Repositories and PPAs, Install Apps, DEBs' \
      add_repositories       'Add Common Repositories' \
      add_ppas               'Add PPAs from file' \
      install_apps           'Install Packages from Lists' \
      install_debs           'Install deb packages' \
      install_pip_packages_2 'Install Python 2 packages via pip' \
      install_pip_packages_3 'Install Python 3 packages via pip3' \
      disable_external_repos 'Reset Repositories for cleanup' \
      purge_not_required     'Purge not required Packages' \
      delete_log_file        "Delete Script logs" \
      3>&1 1>&2 2>&3)


    whiptail_exitstatus=$?
    _debug_log "Whiptail Exit status is : $whiptail_exitstatus"
    if [ $whiptail_exitstatus = 0 ]; then
      _debug_log "Whiptail Choice is: $task"
        case $task in
    update_repos )            _show_confirmation_dialog_for_tasks "Update Repositories metadata/index" "Update Repositories index/metadata?" "$task"
                              ;;
    upgrade_system )          _show_confirmation_dialog_for_tasks "Upgrade Packages" "This will upgrade all your packages to the latest version available.\nContinue?" "$task"
                              ;;
    add_ppas )                _show_confirmation_dialog_for_tasks "Add Additional PPAs" "This task will add PPAs specified in $ppa_list file. Would you like to continue?" "$task"
                              ;;
    add_repositories )        _show_confirmation_dialog_for_tasks "Add Additional Repositories" "Following additional Repositories:\nGoogle Chrome & Google Earth, Google Cloud SDK\nVisual Studio Code\nDocker(If set to true, Default: true)\nInsync\nSpotify\nWineHQ(If set to true, Default: false)\nwill be added.\nShall I do it?" "$task"
                              ;;
    install_apps )            _show_confirmation_dialog_for_tasks "Install Apps" "I can Install the packages listed in lists files mentioned in app-list.list.\nNo checks are being made on the validity of the list. Be careful while installing graphic drivers and core system componetnts. Shall I do it?" "$task"
                              ;;
    disable_external_repos )  _show_confirmation_dialog_for_tasks "Remove External Repositories" "I can remove External Repositories added and PPAs in the ppa.list. Apps installed via ppa will be reverted to original versions/uninstalled. Apps from Repositories will be kept as it is. Shall I do it for you?" "$task"
                              ;;
    purge_not_required )      _show_confirmation_dialog_for_tasks "Purge Unwanted Packages" "Shall I Purge Unwanted packages mentioned in purge.list?" "$task"
                              ;;
    all_in_one )              _show_confirmation_dialog_for_tasks "All In One" "This task will do the following.\nUpdate Repositories\nUpgrade Packages\nAdd Repositories and PPAs\nInstall apps from List\nPurge Unwanted Packages\nContinue?" "$task"
                              ;;
    install_debs )            _show_confirmation_dialog_for_tasks "Download & Install DEB files" "DEB Files in the list deb-files.list will be Download and installed. Proceed with the task?" "$task"
                              ;;
    set_gsettings )           _show_confirmation_dialog_for_tasks "Apply Custom gsettings" "Gsettings mentioned in the file gsettings.list will be Applied. \n Proceed?" "$task"
                              ;;
    install_pip_packages_2 )  _show_confirmation_dialog_for_tasks "Install Python2 packages" "Python packaes for Python 2 mentioned in pip.list will be installed via pip. If necessary python-pip package will be installed from apt. \n Proceed?" "$task"
                              ;;
    install_pip_packages_3 )  _show_confirmation_dialog_for_tasks "Install Python3 packages" "Python packaes for Python 3 mentioned in pip3.list will be installed via pip. If necessary python-pip package will be installed from apt. \n Proceed?" "$task"
                              ;;
    delete_log_file )         _debug_log "Delete log selected"
                              delete_log_file;
                              ;;
        esac
    else
      _debug_log "Whiptail Exit code : $whiptail_exitstatus"
      _debug_log "Exiting because user selected Quit or Whiptail has non zero exit code."
    fi
}


function _check_dependencies()
{
  #statements
  local after_effects_core_dependencies=(wget lsb_release whiptail ping)
  local dependency_check_failed_count dep_res
  dependency_check_failed_count=0;
  _log_and_show "${_info} Checking dependencies..."
  for dep in "${after_effects_core_dependencies[@]}"
  do
   :
   command -v "$dep" > /dev/null
   dep_res=$?
   if [ "$dep_res" -eq 1 ]; then
     set_red
     _log_and_show "${_error} $dep is not installed!${NC}"
     set_default
     dependency_check_failed_count=$((dependency_check_failed_count+1))
   fi
  done

  if [ "$dependency_check_failed_count" -gt 0 ]; then
    set_yellow
    _log_and_show "${_error} One or more dependencies not installed. Check logs or above message."
    _log_and_exit "${_error} Sorry! $SCRIPT cannot continue!" "1"
    set_default
  fi
}

function main()
{
  _init_printf_variables
  set_yellow;
  _line_fill;
  set_default;
  printf "${_checking} Permissions\n"
  if [[ $EUID -ne 0 ]]; then
    set_yellow;
    printf "${_whoops} Insufficinet privilages!!\n"
    set_default;
    printf "${_whoops} This script must be run as root.\n"
    printf "${_notice} Please use sudo ./$SCRIPT to run this as root.\n"
    set_default;
    exit 2;
  else
    _debug_log "${_checked} OK! running as root."
  fi

  # Initialize variables and checks
  _script_launch_log
  _check_dependencies
  _init_script_variables;
  _check_if_in_pwd;
  _init_print_basic_info;

  #============================ CI and Container Checks =========================
  if grep docker /proc/1/cgroup -qa; then
     _log_and_show "${_docker} I'm in MATRIX. Neo, Where are You?"
  fi

  if [ "$TRAVIS" == "true" ]; then
    AUTOPILOT="true"
    export AUTOPILOT
    _log_and_show "${_travis} I'm running in  CI :|"
  fi


  # Process command line arguments.
  while [ "$1" != "" ]; do
      case ${1} in
          -s | --simulate )       simulate_apt_install=true;
                                  set_yellow;
                                  _log_and_show "${_simulate} is set to true";
                                  set_default;
                                  ;;
          -f | --fix )            bool_fix_repo_not_available_for_latest="true";
                                  set_yellow;
                                  _log_and_show "${_fix_repo} is set to true. Using codename: $codename_previous_release.";
                                  set_default;
                                  ;;
          -p | --pre-release )    bool_fix_repo_not_available_for_upcoming_release="true";
                                  set_magenta;
                                  _log_and_show "${_fix_repo} for upcoming release is set to true.";
                                  set_default;
                                  ;;
          -d | --deboalt )        bool_purge_not_required_pkgs="true";
                                  set_yellow;
                                  _log_and_show "${_purging} is set to true. Packages in the list $purge_list will be purged!!";
                                  _log_and_show "${_warn} No checks are being made on the Packages in the list. Use carefully!. Purging something like sudo is stupid idea!";
                                  set_default
                                  ;;
          -y | --yes )            bool_say_yes_to_all="true";
                                  set_yellow;
                                  _log_and_show "${_warn} Will automatically assume yes, for all the confirmation dialogs.";
                                  set_default;
                                  ;;
          -l | --delete-log )     set_default;
                                  delete_log_file;
                                  ;;
          -k | --keep-debs )      set_default;
                                  bool_preserve_debs="true";
                                  _log_and_show "${_info} Will keep downloaded DEB packages."
                                  ;;
          --api-endpoint )        set_default;
                                  bool_custom_api_node="true";
                                  shift; custom_api_node=${1};
                                  _log_and_show "${_api} API endpoint is : ${custom_api_node}"
                                  ;;
          --enable-pre )          set_default;
                                  bool_enable_pre_scripts="true";
                                  _log_and_show "${_info} custom scripts will be run before running any tasks."
                                  ;;
          --enable-post )         set_default;
                                  bool_enable_post_scripts="true";
                                  _log_and_show "${_info} custom scripts will be run after running all the tasks."
                                  ;;
    --no-version-checks )   set_default;
                                  bool_check_version="false"
                                  ;;
  --no-stats | --no-reporting )   set_default;
                                  bool_report_stats="false";
                                  _log_and_show "${_info} Statistis will not be reported."
                                  ;;
           * )                    set_yellow
                                  _log_and_exit "${_error} Invalid option: $1" "22"
                                  set_default
                                  ;;
      esac
    shift
  done

  _fix_ubuntu_derivatives;
  _test_internet_connection;
  _test_conflicting_apps;
  _export_variables;
  # Run Pre Scripts
  run_pre_scripts;

  # CI testing
  if [[ "$AUTOPILOT" == "true" ]]; then
    set_blue;
    _log_and_show "${_autopilot} is Active"
    set_default
    #_log_and_exit "Because I can" "255"
    all_in_one;
  else
  _process_opts;
  fi
  #Logs exit and exit code of script
  _script_exit_log
}


#Initialze main
main "$@"
