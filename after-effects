#!/usr/bin/env bash
# shellcheck disable=SC2059
# Legal Preamble:
#
# This script is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This script is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <https://www.gnu.org/licenses/gpl-3.0.txt>

# Version:2.0
# Author: Prasad Tengse
# Licence: GPLv3
# Github Repository: https://github.com/tprasadtp/after-effects-ubuntu
# Requirements - Bash v4.4 and above
#              - Ubuntu 14.04, 16.04, 17.04, 17.10, Elementary Freya, Mint 17.X or 18.X
#              - whiptail


#Constants
DATE=$(date +%Y-%m-%d:%H:%M:%S)
SCRIPT=$(basename "$0")
dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
log_file="$dir"/minchu-logs/after-effects.log
mkdir -p "$dir"/minchu-logs


function _init_script_variables()
{
  # Function defines Script variables
  # Necessary variables used by the script are initialized here. This function
  # should be called first before choices are made, always.

  #grabbing os info
  readonly OS_DISTRIBUTION=$(lsb_release --id | cut -f2 | tr '[:upper:]' '[:lower:]')
  readonly VERSION=$(lsb_release --release | cut -f2)
  readonly LONG_VERSION=$(lsb_release -d | cut -f2 | cut -d ' ' -f2)
  code_name=$(lsb_release -cs)
  readonly architeture=$(uname -m | sed 's/x86_//;s/i[3-6]86/32/')
  if [ "$architeture" == "64" ];then
    _debug_log "Architecture is 64 bit."
    readonly ARCH=amd64
  elif [[ "$architeture" == "32" ]]; then
    _debug_log "Architecture is 32 bit."
    readonly ARCH=i386
  else
    set_yellow;
    _log_and_show "${_error} This architecture is not supported by this script!"
    set_default;
    _line_fill;
    _log_and_exit "Unsupported Architeture. $(uname -m)" "103"
  fi
  readonly SOURCES_FILE_DIR=/etc/apt/sources.list.d

  #colors for display
  readonly BLUE=$(tput setaf 6)
  readonly YELLOW=$(tput setaf 3)
  readonly NC=$(tput sgr 0)
  readonly MAGNATA=$(tput setaf 5)

  # Package list files
  readonly deb_files_list="$dir"/data/deb-files.list
  readonly ppa_list="$dir"/data/ppa.list
  readonly app_list_list="$dir"/data/app-list.list
  readonly purge_list="$dir"/data/purge.list

  #============================ CI and Container Cheks =========================
  if grep docker /proc/1/cgroup -qa; then
     _log_and_show "${_docker} I'm in MATRIX :("
  fi

  if [ "$TRAVIS" == "true" ]; then
    _log_and_show "${_travis} I'm in a CI :("
  fi


  #============================ Switches/ bools ================================
  # Latest wine builds
  readonly add_winehq_repo=false

  #Docker community edition
  readonly add_docker_repo=true

  #Fix Repo not available for latest release
  fix_repo_not_available_for_latest="false"
  readonly code_name_latest_release="artful"
  readonly codename_previous_release="zesty"

  # Simulate apt-get install by default its false
  # can be set to true if an argument -s or --simulate is passed while running the script
  simulate_apt_install="false"

  # purge packages not required
  # default is false
  # requires -d to be passed via command line otherwise it will not work
  # set this to true if you dont want to pass -d every time
  bool_purge_not_required_pkgs="false"

  # Say yes to all (No whiptail dialogues)
  # Default is false
  # can be set to true and dialogue boxes will be skipped if a command line option -y is passed
  # set this to true if you dont want to pass -y every time
  bool_say_yes_to_all="false";

  # Configure Partner Repositoris
  # Some Releases like linux mint have their own way of enabling partner Repositoris,
  # Disable adding partner Repositoris when using ubuntu Derivatives like Linux Mint.
  # Default is true
  # _fix_ubuntu_derivatives will take care of this variable and set it to false if
  # derivative of ubuntu is found.
  bool_config_partner_repo="true"


  #================ Because I care about Beauty of Output Logs =================
  readonly         _adding="[     Adding    ]"
  readonly          _added="[     Added     ]"
  readonly     _adding_ppa="[   Adding PPA  ]"
  readonly      _added_ppa="[   Added  PPA  ]"
  readonly          _oh_no="[     Oh No!    ]"
  readonly     _installing="[   Installing  ]"
  readonly      _installed="[   Installed   ]"
  readonly       _removing="[    Removing   ]"
  readonly        _removed="[    Removed    ]"
  readonly       _deleting="[    Deleting   ]"
  readonly        _deleted="[    Deleted    ]"
  readonly      _linuxmint="[  Linux - Mint ]"
  readonly     _elementary="[ Elementary-OS ]"
  readonly      _canonical="[  Canonical-y  ]"
  readonly        _purging="[    Purging    ]"
  readonly         _purged="[    Purged     ]"
  readonly           _done="[     Done!     ]"
  readonly          _error="[     Error!    ]"
  readonly     _aptrunning="[ I'm not Alone ]"
  readonly       _internet="[    Internet   ]"
  readonly             _ok="[      OK!      ]"
  readonly       _updating="[    Updating   ]"
  readonly        _updated="[    Updated    ]"
  readonly      _upgrading="[   Upgrading   ]"
  readonly       _upgraded="[   Upgraded    ]"
  readonly    _derivatives="[  Derivatives  ]"
  readonly      _conflicts="[   Conflicts   ]"
  readonly         _notice="[    Notice     ]"
  readonly    _downloading="[  Downloading  ]"
  readonly           _info="[     Info      ]"
  readonly         _failed="[     Failed    ]"
  readonly   _google_cloud="[      GCP      ]"
  readonly       _simulate="[   Simulating  ]"
  readonly       _fix_repo="[Fix Repo4Latest]"
  readonly        _deboalt="[    Deboalt    ]"
  readonly           _warn="[    WARNING    ]"
  readonly         _whoops="[   Whoopsie!   ]"
  readonly         _travis="[   TRAVIS-CI   ]"
  readonly         _docker="[     Docker    ]"
  #readonly           _falg="[     Flag      ]"

}

function _init_script_initialization()
{
  # This function logs the Necessary details which hel--dry-run--dry-runps in debugging.
  # Should be used after _init_script_variables function
  _log_and_show "${_notice} Following details were recognised by the Script."
  _log_and_show "${_info} Distro: ${OS_DISTRIBUTION}"
  _log_and_show "${_info} Version: ${VERSION}"
  _log_and_show "${_info} Code Name: ${code_name}"
  _log_and_show "${_info} Architeture: ${ARCH}"
  _log_and_show "${_info} Path for sources.list.d: ${SOURCES_FILE_DIR}"

  #disable hist chars  so that I can print "!!"" properly
  histchars=
}


# Utility Functions
function _line_fill()
{
    printf "%-$(tput cols)s@%s\n" | sed -e "s/ /-/g" -e "s/-@/ /" -e "s/@-/ /"
}
function set_blue()
{
  tput setaf 6
}

function set_yellow()
{
  tput setaf 3
}
function set_default()
{
  tput sgr 0
}

function _script_launch_log()
{
    _debug_log "Executing Script"
    _line_fill | tee -a "$log_file"
    _debug_log "Running %s on %s as %s" "$SCRIPT" "$DATE" "$USER"
}

function _goodbye_msg ()
{
  printf "\n$(tput setaf 3)It was nice helping you,\nHave a great time with this Linux Machine.\nWith loads of love,\n$(tput setaf 6)${SCRIPT} running on $(uname -n) as ${USER} $(tput sgr 0)\n"
}

function _script_exit_log()
{

    _debug_log "Exiting Script"
    printf "\nFinished %s on %s.\nLast exit code was: %d\n" "$SCRIPT" "$(date)" "$?" >> "$log_file"

}


function _debug_log()
{
    local msg="$1"
    printf "[$(date)] [ DEBUG ]\t$msg \n" >> "$log_file"
}

function _log_and_show()
{
    local msg="$1"
    printf "$msg\n"
    printf "[$(date)] [  LOG  ]\t$msg \n" >> "$log_file"
}

function _log_and_exit()
{
  # ARG-1 log msg
  # ARG-2 exit code int
    local msg="$1"
    printf "[$(date)] [  LOG  ]\t$msg \n" | tee -a "$log_file"
    printf "\nFinished %s on %s.\nLast exit code was: %d\n" "$SCRIPT" "$(date)" "$?" >> "$log_file"
    exit "$2";
}

function delete_log_file()
{
  set_yellow;
  printf "${_deleting} log file %s.\n" "$log_file"
  set_default;
  rm -f "$log_file"
  exit 700;

}


function  _add_timestamp_to_ppa_logs()
{
  # This function adds time stamp to apt-logs without using external utilities
  # Log will be automatically written to $log_file
  # Usage command | _add_timestamp_to_apt_logs
  while IFS= read -r line; do printf "[$(date)] [  PPA  ]\t%s\n" "$line" &>> "$log_file"; done

}

function  _add_timestamp_to_apt_logs()
{
  # This function adds time stamp to apt-logs without using external utilities
  # Pipe the output to this dunction before redirecting to file.
  # Usage command | _add_timestamp_to_apt_logs >> file
  while IFS= read -r line; do printf "[$(date)] [  APT  ]\t%s\n" "$line" &>> "$log_file"; done
}

function  _add_timestamp_to_dpkg_logs()
{
  # This function adds time stamp to dpkg-logs without using external utilities
  # Pipe the output to this function before redirecting to file.
  # Usage command | _add_timestamp_to_dpkg_logs >> file
  while IFS= read -r line; do printf "[$(date)] [  PKG  ]\t%s\n" "$line" &>> "$log_file"; done
}

function  _add_timestamp_to_cat_logs()
{
  # This function adds time stamp to cat without using external utilities
  # Pipe the output to this function before redirecting to file.
  # Usage command | _add_timestamp_to_cat_logs >> file
  while IFS= read -r line; do printf "[$(date)] [  CAT  ]\t%s\n" "$line" &>> "$log_file"; done
}


function _fix_ubuntu_derivatives()
{
  # Some Ubuntu based distributions use their own codename (Linux mint, Elementary)
  # some repositories require that ubuntu codename is used.
  # This function fixes that for
  # Linux mint 17.X : Ubuntu 14.04 Trusty,
  # Linux mint 18.x : Ubuntu 16.04 Xenial,
  # Elementary OS Loki : Ubuntu 14.04 Trusty,
  # Elementary OS Freya and Juno : Ubuntu 16.04 Xenial
  # POP_OS! uses Ubuntu codenames (No need to apply fix)
  # IF the release is not known this function exits the script for safety.

  _log_and_show "${_derivatives} Checking for Ubuntu based Distributions"
  set_yellow;
        _debug_log "Variable code_name is : $code_name"
  case ${code_name} in
      qiana | rebecca | rafaela | rosa )    _log_and_show "${_linuxmint} Release is Linux mint 17.X."
                                            _log_and_show "${_notice} Setting additional repositoris to follow Ubuntu 14.04."
                                            code_name="trusty"
                                            bool_config_partner_repo="false"
                                            ;;
      sarah | serena | sonya | sylvia )     _log_and_show "${_linuxmint} Release is Linux mint 18.X."
                                            _log_and_show "${_notice} Setting additional repositoris to follow Ubuntu 16.04."
                                            code_name="xenial"
                                            bool_config_partner_repo="false"
                                            ;;
      loki | juno )                         _log_and_show "${_elementary} This release of Elementary OS is based on Ubuntu 16.04 Xenial."
                                            _log_and_show "${_notice} External repositories will use Ubuntu 16.04."
                                            code_name="xenial"
                                            bool_config_partner_repo="false"
                                            ;;
      freya )                               _log_and_show "${_elementary} This release of Elementary OS is based on Ubuntu 14.04 Trusty."
                                            _log_and_show "${_notice} External repositories will use Ubuntu 14.04."
                                            code_name="trusty"
                                            bool_config_partner_repo="false"
                                            ;;
      xenial | trusty | artful | zesty )    _log_and_show "${_canonical} No known derivative of Ubuntu found."
                                            set_default;
                                            _log_and_show "${_info} Keeping the codename as: $code_name."
                                            _log_and_show "${_notice} If installation fails or errors out, please report.";
                                            ;;
      *)                                    _log_and_show "${_error} Unknown Distribution/Release."
                                            _log_and_show "${_notice} This Script is not designed to run on this ($code_name) distro/release."
                                            _script_exit_log;
                                            exit 500;
                                            ;;
  esac
  _debug_log "Assigning Code name to variable code_name_fix_latest as $code_name."
  code_name_fix_latest="$code_name"
  set_default;

}


function _test_internet_connection ()
{
  # Function to check internet connection
  _log_and_show "${_internet} Checking..."
  if wget --tries=3 --timeout=15 www.google.com -O /tmp/testinternet &>/dev/null 2>&1; then
    _log_and_show "${_internet} Connected"
    rm -f /tmp/testinternet
  else
    set_yellow;
    _log_and_show "${_oh_no} Booooooo! You are not connected to the Internet!. Please check your Internet connection and try again."
    rm -f /tmp/testinternet
    set_default;
    exit 400;
  fi
}


function _test_conflicting_apps ()
{
  # Function checks if any apps like syanptic aptitude are running.
  _log_and_show "${_conflicts} Checking"
  for lock in synaptic update-manager software-center apt-get dpkg aptitude
  do
    # shellcheck disable=SC2009
    if ps -U root -u root u | grep $lock | grep -v grep > /dev/null;
       then
         _log_and_show "${_aptrunning} Installation won't work. Please close $lock first then try again."
         _script_exit_log
         exit 404;
       else
        _debug_log "$lock not running, Checking other apps..."
     fi
   done
   _log_and_show "${_conflicts} None detected."
   sleep 5
}

function _show_confirmation_dialogue_for_tasks()
{
  # Function to confirm whether action selected should be perfromed or not.
  # Accepts 3 arguments
  # ARG-1 Name of the task/function selected
  # ARG-2 Message to be displayed in confirm box
  # ARG-3 name of the function to execute
  # Depends on whiptail
  # To overide and say yes to all dialogues pass -y as command line option while running the script
  local name_of_task="$1" #Name of the task to be perfromed
  local confirm_msg="$2" #Message shoen in Confirmation dialogue
  local exec_function="$3" #Function to run if user selected yes
  COLUMNS=$(tput cols)
  LINES=$(tput lines)
  export COLUMNS LINES
  if [ "$bool_say_yes_to_all" != "true" ]; then
    _debug_log "Confirmation dialogue is Necessary to get user approval to make changes for: $exec_function"
    # shellcheck disable=SC2086
    if (whiptail  --title "$name_of_task" --yesno "$confirm_msg" $LINES $COLUMNS $(( LINES - 12 ))) then
        _debug_log "User selected yes, Proceed with $name_of_task"
        # execute the function
        $exec_function;
    else
        _debug_log "Selected No for $name_of_task , Returning to Main menu"
        _process_opts;
    fi
  elif [ "$bool_say_yes_to_all" = "true" ]; then
    _debug_log "Yes to all: No confirm dialogues displayed"
    _debug_log "Executing: $exec_function"
    $exec_function;
  else
    _debug_log "Illegal value for bool_say_yes_to_all"
  fi
}


function _install_pre_requisites()
{
  # This function installs required packages for adding apt repositories
  # These should be present in your base ubuntu instal. If not present then, this function
  # will install them.
  # Following are the packages installed by this function:
  # linux-image-extra-<>, apt-transport-https, ca-certificates,
  # curl, software-properties-common
  _log_and_show "${_installing} Necessary dependencies "
  _debug_log "${_installing} apt-transport-https, ca-certificates, curl, software-properties-common ppa-purge."
   apt-get -y install apt-transport-https \
    ca-certificates \
    curl \
    ppa-purge\
    software-properties-common 2>&1 | _add_timestamp_to_apt_logs  || _log_and_exit "${_failed} Installing dependencies. Script cannot continue!!" "102"
  _log_and_show "${_installed} Dependencies."
}


function _fix_repo_not_available()
{
  # If repository is not available for latest ubuntu release, this uses last stable release
  # (may not be LTS) for adding repository
  if [ "$fix_repo_not_available_for_latest" == "true" ]; then
    # Only do this on latest releases
    if [ "$code_name" == "$code_name_latest_release" ]; then
      _debug_log "Sometimes repositories are not available for latest ubuntu release.\nUsing last known stabel release: $code_name_latest_release."
      printf "${YELLOW}Since Repository is not available for the latest Ubuntu release,\npreviously available repositories from an older release: $codename_previous_release is being used.\n"
      printf "You need to modify this in Software and updates when it becomes available for ${code_name_latest_release}.\n${NC}"
      code_name_fix_latest="$codename_previous_release"
    else
      _debug_log "This release has repositories available. No need to apply fix repo not available error, when builds are latest."
    fi
  else
    _debug_log "fix_repo_not_available is disabled."
fi
}


function add_ppas()
{
  # Function to add ppa from reading ppa from ppa.list file in /data directory
  # List file should contain ppas in following format
  # ppa:ppa:<author>/<ppa> for example, ppa:mozillateam/firefox-nex for adding firefox next/Beta PPA
    _debug_log "Adding PPA Fucntion"
    # Function Reads the file ./data/ppa.list and adds the ppa one by one
    while IFS= read -r line
      do
           _log_and_show "${_adding_ppa} $line"
           _debug_log "Adding $line"
           _debug_log "Add PPA Log Below"
           if add-apt-repository -y "$line" 2>&1 | _add_timestamp_to_ppa_logs ; then
             _line_fill >> "$log_file"
             _log_and_show "${_added_ppa} $line."
           else
             _line_fill >> "$log_file"
             _log_and_show "${_oh_no} Some Error occured while adding $line. Ignoring and moving on.\n"
           fi
      done < "$ppa_list"
      set_yellow;
      _log_and_show "${_added} PPAs in the list file."
      set_default;
}


function add_repositories()
{
  # This function adds repositories for several apps like
  # Google Chrome, Spotify, AWS tools, Google Cloud SDK, GCSFUSE(Part of google cloud),
  # Skype, Docker, Skype, Microsoft Visual Studio Code, Google Earth, Insync client
  # WARNING: Some repositories might not support latest version of Ubuntu.
  # ${code_name_fix_latest} is used in known cases where a repository might be unavailable for latest Ubuntu Release

  local CLOUD_SDK_REPO
  local GCSFUSE_REPO
  # install dependencies required
  _install_pre_requisites;
  # if repository is not available for latest ubuntu release, use previous release
  # Be careful, things might not be compatible
  _fix_repo_not_available;
  _debug_log "Adding External Repositories"

  # Add Google Chrome and Google Earth
  _log_and_show "${_adding} Google Repositories"
    _debug_log "Adding Google Package Siging Key"
  wget -q  https://dl.google.com/linux/linux_signing_key.pub -O linux_signing_key.pub >> $"$log_file"
  _debug_log "Adding Google Key to Trusted Keys list"
  apt-key add linux_signing_key.pub >> "$log_file" 2>&1  || _log_and_show "Adding Trusted Keys for Google failed."
  _log_and_show "${_adding} Google Chrome Repository"
  echo "deb http://dl.google.com/linux/chrome/deb/ stable main #Google-Chrome" > ${SOURCES_FILE_DIR}/google-chrome.list || _log_and_show "Adding Google Chrome Repository failed"
  _log_and_show "${_adding} Google Earth Repository"
  echo "deb [arch=amd64] http://dl.google.com/linux/earth/deb/ stable main #Google-Earth" > ${SOURCES_FILE_DIR}/google-earth.list || _log_and_show "Adding Google Chrome Repository failed"


  # Spotify client
  _log_and_show "${_adding} Spotify repository"
  _debug_log "Adding Spotify Keys"
  apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys BBEBDCB318AD50EC6865090613B00F1FD2C19886 >> "$log_file" 2>&1  || _log_and_show "Adding Spotify Repository failed"
  echo "deb http://repository.spotify.com stable non-free #Spotify For Linux" > ${SOURCES_FILE_DIR}/spotify.list || _log_and_show "Adding Spotify Repository Failed"

   # Insync
  _log_and_show "${_adding} Insync repository"
  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ACCAF35C  >> "$log_file" 2>&1
  echo "deb http://apt.insynchq.com/ubuntu $code_name_fix_latest non-free contrib #Insync Client" > ${SOURCES_FILE_DIR}/insync.list || _log_and_show "Adding Insync Repository failed"

  # Google Cloud SDK and GCS-FUSE
  CLOUD_SDK_REPO="cloud-sdk-$code_name_fix_latest"
  GCSFUSE_REPO="gcsfuse-$code_name_fix_latest"
  _log_and_show "${_google_cloud} Repositories"
  _debug_log "Adding Google Cloud repository sigining key"
  wget -q https://packages.cloud.google.com/apt/doc/apt-key.gpg >> "$log_file"
  apt-key add apt-key.gpg >> "$log_file"  2>&1
  _log_and_show "${_adding} Google-Cloud-SDK repository"
  echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main #Google Cloud SDK" > ${SOURCES_FILE_DIR}/google-cloud-sdk.list  || _log_and_show "Adding GCSFUSE Repository failed"
  _log_and_show "${_adding} GCSFUSE repository"
  echo "deb http://packages.cloud.google.com/apt $GCSFUSE_REPO main #GCSFUSE" > ${SOURCES_FILE_DIR}/gcsfuse.list  || _log_and_show "Adding Google Cloud SDK Repository failed"
  #AWS
  # Handled by pip

  #Wine HQ
  if [ "$add_winehq_repo" == "true" ]; then
    _debug_log "Adding WINWHQ is set to true"
    _log_and_show "${_adding} WineHQ repository"
    _debug_log "Getting WineHQ repository Key"
    wget -q https://dl.winehq.org/wine-builds/Release.key -O wine-hq-sigining-key.key >> "$log_file"  2>&1
    _debug_log "Adding WineHQ Key"
    apt-key add wine-hq-sigining-key.key >> "$log_file"  2>&1 || _log_and_show "Adding WineHQ keys failed"
    _debug_log "Adding WineHQ Repository"
    echo "deb https://dl.winehq.org/wine-builds/ubuntu/ $code_name_fix_latest main #WineHQ" > ${SOURCES_FILE_DIR}/winehq.list || _log_and_show "Adding WineHQ repository failed"
  else
    _log_and_show "${_adding} WineHQ is set to false. Skipping."
  fi
  # Docker CE
  if [ "$add_docker_repo" == "true" ]; then
    _debug_log "Adding Docker repository is set to true"
    _log_and_show "${_adding} Docker-CE repository"
    _debug_log "Getting Docker-CE repository Key"
    wget -q https://download.docker.com/linux/ubuntu/gpg -O docker-key.gpg >> "$log_file"  2>&1
    _debug_log "Adding Docker repository key"
    apt-key add docker-key.gpg >> "$log_file"  2>&1 || _log_and_show "Adding Docker-CE keys failed"
    _debug_log "${_added} Docker-CE"
    echo "deb [arch=$ARCH] https://download.docker.com/linux/ubuntu  $code_name_fix_latest stable #Docker-Community-Edition" > ${SOURCES_FILE_DIR}/docker.list || _log_and_show "Adding Docker-CE repository failed"
  else
    _debug_log "Adding Docekr-CE is set to false. Skipping."
  fi

  # Skype
  _log_and_show "${_adding} Skype for linux repository"
  _debug_log "Getting Skype repository key"
  wget -q https://repo.skype.com/data/SKYPE-GPG-KEY -O skype-linux-key.gpg >> "$log_file"
  _debug_log "Adding Skype keys to trusted list"
  apt-key add skype-linux-key.gpg >> "$log_file"  2>&1 || _log_and_show "Adding Skype for linux key failed"
  echo "deb [arch=$ARCH] https://repo.skype.com/deb stable main #Skype for Linux" > $SOURCES_FILE_DIR/skype-stable.list || _log_and_show "Adding Skype for linux repository failed"


  #Visual Studio Code
  #_log_and_show "${_adding} Visual Studio Code repository"
  #_debug_log "Getting GPG keys for repository"
  #curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
  #_debug_log "Adding Key to trusted GPG keys directory"
  #mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg >> "$log_file" 2>&1
  #echo "deb [arch=$ARCH] https://packages.microsoft.com/repos/vscode stable main" > ${SOURCES_FILE_DIR}/vscode.list

  # Enable canonical Partner repos
  if [ "$bool_config_partner_repo" != "false" ]; then
    _debug_log "Release is Ubuntu Enabling Partner Repository"
    _log_and_show "${_adding} Canonical partner repositoris"
    add-apt-repository "deb http://archive.canonical.com/ubuntu $code_name partner" >> "$log_file"
  else
    _log_and_show "${_warn} This is Linux Mint/Elementary. Since they have different way of configuring partner repositoris, leaving it default."
  fi
  # Remove artifacts and keys
  _debug_log "Removing keys and converted files from current directory"
  rm  -f ./*.gpg ./*.asc ./*.pub ./Release ./*.pub.* ./*.asc.* ./*.key.* ./*.gpg.*

}


function update_repos()
{
  local exit_status
  set_yellow
  _log_and_show "${_updating} Repository index/metadata."
  set_default
  apt-get update | _add_timestamp_to_apt_logs >> "$log_file"
  exit_status=$?
  set_yellow;
  if [ "$exit_status" -eq 0 ]; then
    _log_and_show "${_updated} Successfully!"
  else
    set_yellow
    _log_and_show "${_oh_no} Something went wrong in upgrading packages. Please see the log file for more details."
    _log_and_show "${_notice} Most of the times its either missing repositories/keys or wrongly configured repositories."
  fi
  set_default;
}


function upgrade_apps()
{
  local exit_status
  _log_and_show "${_upgrading} packages"
  _debug_log "Listing Upgradable packages"
  _line_fill;
  # upgradable is not available in apt-get ignore warning about apt being unstable
  apt list --upgradable 2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "Something went wrong while listing upgradable packages. Please see the log file for more details."
  set_yellow;
  _debug_log "${_notice} The above list of packages will be upgraded!"
  sleep 5;
  set_default;
  sleep 5
  _debug_log "${_upgrading} packages..."
  # only do upgrades if simulate is set to false
  if [ "$simulate_apt_install" == "false" ]; then
    apt-get -y upgrade 2>&1 | _add_timestamp_to_apt_logs
    apt-get -y dist-upgrade 2>&1 | _add_timestamp_to_apt_logs
    exit_status=$?
  else
    # if it is not simulate set exit status as 0
    # Simulate flag skips the section above. No point in Checking for exit status
    _debug_log "${_simulate} is set to True. Not performing upgrade!"
    exit_status=0
  fi
  set_yellow;
  if [ "$exit_status" -eq 0 ]; then
    _log_and_show "${_upgraded} Successfully!"
  else
    _log_and_show "${_oh_no} Something went wrong in upgrading packages."
    _log_and_show "${_notice} Please see the log file for more details. Most of the times its either missing repositories or wrongly configured repositories."
  fi
  set_default;
}


function  upgrade_system()
{
  _debug_log "Updating and upgrading packages"
  update_repos;
  upgrade_apps;
}

function disable_external_repos()
{
  _log_and_show "${_deleting} External repositoris"
  _install_pre_requisites;
  # Function to disable external repositoris added by this script.
    # Function Reads the file ./data/ppa.list and purges the ppa one by one
    while IFS= read -r line
      do
           _log_and_show "${_purging} $line"
           _debug_log "Purging: $line"
           if ppa-purge -y "$line"  2>&1 | _add_timestamp_to_apt_logs  ; then
             sleep 10 #wait sometimes apt lock isnt released soon.
             _log_and_show "${_purged} $line."
           else
             _log_and_show "${_oh_no} Some Error occured while purging $line."
           fi
      done < "$ppa_list"
      set_yellow;
    _log_and_show "${_purged} External PPAs."
    _log_and_show "${_deleting} Keys and External Repositoris"
    set_default
    local old_path
    old_path=$(pwd)
    _log_and_show "${_deleting} Google signing key -1"
    apt-key del 7FAC5991  2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "${_deleting}  Google signing key -1 failed."
    _log_and_show "${_deleting} Google signing key -2"
    apt-key del D38B4796  2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "${_deleting}  Google signing key -2 failed."
    _log_and_show "${_deleting} Webupd8 signing key"
    apt-key del 4C9D234C  2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "${_deleting}  Webupd8 failed."
    _log_and_show "${_deleting} Spotify signing key"
    apt-key del D2C19886  2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "${_deleting}  Spotify signing key -2 failed."
    _log_and_show "${_deleting} Spotify signing key"
    apt-key del 341D9410  2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "${_deleting}  Spotify signing key -2 failed."
    _log_and_show "${_deleting} Skype for Linux signing key"
    apt-key del DF7587C3  2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "${_deleting}  Skype for Linux keys failed."
    _log_and_show "${_deleting} WineHQ signing key"
    apt-key del 5FCBF54A  2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "${_deleting}  WineHQ keys failed."
    _log_and_show "${_deleting} Google Cloud signing key"
    apt-key del A73170BF  2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "${_deleting}  Google Cloud keys failed."
    _log_and_show "${_deleting} InSync signing key"
    apt-key del ACCAF35C  2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "${_deleting}  InSync keys failed."
    _log_and_show "${_deleting} Docker-CE signing key"
    apt-key del 0EBFCD88  2>&1 | _add_timestamp_to_apt_logs  || _log_and_show "${_deleting}  Docker-CE keys failed."
    _log_and_show "${_removing} External Repositoris"
    _debug_log "${_removing} *.list and *.save files from ${SOURCES_FILE_DIR}"
    cd /etc/apt/sources.list.d && rm  -f google-chrome.* google-earth.* skype-stable.* spotify.* insync.* google-cloud-sdk.* gcsfuse.* docker.* winehq.* vscode.*
    local exit_status
    exit_status=$?
    set_yellow;
    if [ "$exit_status" -eq 0 ]; then
      _log_and_show "${_removed} Additional APT keys and repositories."
      _log_and_show "${_notice} Canonical partner repository was left unchanged."
    else
      _log_and_show "${_oh_no} Failed to remove all or some of the list files or keys in Sources directory."
      set_blue
      _log_and_show "${_notice} Please see the log file for more details."
    fi
    _line_fill;
    set_default;
    cd "$old_path" || return
    _log_and_show "${_removed} PPAs and Repositories. Please check the logs for errors."

}

function purge_not_required()
{
  # This function purges not required packages from the list /data/purge.list
  # A flag -d MUST be passed for this option to work
  # Not passing a flag and choosing purge will result in errors
  # Simulate is not properly tested and use it with caution
  # combination of simulate and purge is UNSTABLE
  # You can modify -d requirement by setting the d_flag_passed=true
  # No validation/checks are done on the list file, if you are stupid and remove say sudo (why would you??)
  # It script will not check!

  local exit_status
  local packages
  if [ "$bool_purge_not_required_pkgs" == "true" ]; then
    # check if the file exists
    if [ -e "$purge_list" ]; then
      _debug_log "purge_list exists"
           _log_and_show "${_purging} packages from list :$purge_list:"
           # shellcheck disable=SC2002
           # just to print it in logs so ignore shellcheck
           cat "$purge_list" | _add_timestamp_to_cat_logs >> "$log_file"
           packages=$(cat "$purge_list")
           # Check if simulate is true
           if [ "$simulate_apt_install" == "true" ]; then
             set_yellow;
             _log_and_show "${_simulate} No packages will be purged!!"
             set_default;
             # disable shellcheck for quoted variable as its an exception
             # quoting $packages leads to errors.
             # shellcheck disable=SC2086
             apt-get -y purge -s $packages 2>&1 | _add_timestamp_to_apt_logs
           else
           # shellcheck disable=SC2086
             apt-get -y purge $packages 2>&1 | _add_timestamp_to_apt_logs
           fi
           exit_status=$?
           set_yellow
           if [ "$exit_status" -eq 0 ]; then
             _log_and_show "${_purged} packages in the list $purge_list"
           else
             _log_and_show "${_oh_no} Something went wrong while purging packages in $purge_list"
             set_blue;
             _log_and_show "${_notice} Please see the log file for more details."
         fi
      else
      _log_and_show "${_error} Purge list file not found!"
    fi
  else
    set_yellow
    _log_and_show "${_error} Purge switch is set to false. Did you pass -d along wth the command?"
  fi
set_default

}



function install_apps()

{
  # Function to install apps mentioned in individual list files in the app-list.list
  # Repositories manually added get their own list file because they are prone to errors
  # This function reads from list of lists
  # File ./data/app-list.list contains list of list files in ./data/ directory
  # which contain package names of the packages to be installed.
  #
  # external-repo should always be at last to avoid any errors in previous lists.
  # No checks are being made on any of the files for validity. One entry per line is recommended.
  # If a package is not available entire collection in the file *.list will not be installed!!
  # Accept some EULA
  update_repos;
  echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true |  debconf-set-selections
  #Install starts here
  local packages


  while IFS= read -r line
    do
         _log_and_show "${_installing} packages from list :$line:"
         _debug_log "$line\n"
         # shellcheck disable=SC2002
         # just to print it in logs so ignore shellcheck
         cat "$line" 2>&1 | _add_timestamp_to_cat_logs
         packages=$(cat "$line")
         [[ -z "$packages" ]] && _log_and_show "package list to install is empty!!" && continue;
         # Check if simulate is true
         if [ "$simulate_apt_install" == "true" ]; then
           set_yellow;
           _log_and_show "${_simulate} No packages will be installed!!"
           set_default;
           # disable shellcheck for quoted variable as its an exception
           # quoting $packages leads to errors.
           # we need user to see errors, dont redirect stderr
           # shellcheck disable=SC2086
           apt-get -y install -s $packages | _add_timestamp_to_apt_logs
         else
           # shellcheck disable=SC2086
           apt-get -y install $packages | _add_timestamp_to_apt_logs
         fi
         exit_status=$?
         if [ "$exit_status" -eq 0 ]; then
           set_yellow
           _log_and_show "${_installed} packages in the list $line"
         else
           _log_and_show "${_oh_no} Something went wrong while installing packages in $line"
           set_blue;
           _log_and_show "${_notice} Please see the log file for more details."
       fi
         set_default;
         unset packages;
    done < "$app_list_list"

}

function install_debs ()
{

  # Function to get the deb files from DEB_URL in the ./data/deb_files.list
  # The list fine has following format
  #  URL to get the deb file  <space or tab> NAME_OF_THE_APP

  local deb_url
  local deb_name

  _debug_log "Option: Install DEB Files, Function name: install_debs"
    while IFS= read -r line
      do
           _debug_log "$line"
           deb_url=$(echo "$line" | cut -d ' ' -f1 )
           deb_name=$(echo "$line" | cut -d ' ' -f2 )
           _debug_log "DEB file url: $deb_url"
           _debug_log "DEB file name: $deb_name"
           _log_and_show "${_downloading} $deb_name"
           wget -q "$deb_url" -O "${deb_name}" >> "$log_file"

           _log_and_show "${_installing} $deb_name"
           # Check if simulate is true
           if [ "$simulate_apt_install" == "true" ]; then
             set_yellow
             _log_and_show "${_simulate} $deb_name Installation!!"
             set_default
             dpkg -i --dry-run "$deb_name" | _add_timestamp_to_dpkg_logs >> "$log_file" 2>&1
             _debug_log "$_installing missing packages"
             apt-get -y install -f | _add_timestamp_to_apt_logs >> "$log_file"
            else
              dpkg -i "$deb_name" | _add_timestamp_to_dpkg_logs >> "$log_file" 2>&1
             _debug_log "$_installing missing packages"
              apt-get -y install -f | _add_timestamp_to_apt_logs >> "$log_file"
           fi

            # shellcheck disable=SC2181
           if [ "$?" = "0" ]; then
                _log_and_show "${_installed} $deb_name successfully"
           else
                _log_and_show "${_oh_no} Some error occured during downloading and installing $line."
                $?="0"
          fi
      done < "$deb_files_list"

}

function all_in_one()
{
  #Wrapper for all options
  set_yellow;
  _debug_log "Option: ALL IN ONE, function name: all_in_one"
  _line_fill;
  set_blue;
  _log_and_show "${_info} Apps will be installed, Upgrades and repositoris and will be added, deb files will be downloaded and installed!\nThis action is not reversible in all cases."
  _debug_log "All in One initialized"
  set_default;
  update_repos;
  upgrade_apps;
  add_ppas;
  add_repositories;
  install_apps;
  install_debs;
  set_yellow;
  _line_fill;
  set_default;
}


function _process_opts
{
  local whiptail_exitstatus
  _debug_log "Processing Options"
  COLUMNS=$(tput cols)
  LINES=$(tput lines)
  export COLUMNS LINES
  # shellcheck disable=SC2086
  task=$(whiptail \
      --notags \
      --backtitle "$SCRIPT" \
      --title "Ubuntu Post-Install Script" \
      --menu "\nWhat would you like me to do?\nLogs will be written to ${log_file}. Check the logs if you need details on what's been done." \
      --cancel-button "Quit" \
      $LINES $COLUMNS $(( LINES - 12 )) \
      update_repos           'Update Repositories' \
      upgrade_system         'Upgrade packages to latest' \
      all_in_one             'Install all apps and configure, I am in control' \
      add_repositories       'Add Common Repositories' \
      add_ppas               'Add PPAs from file' \
      install_apps           'Install most common tools' \
      install_debs           'Install DEBS not available in Repositories' \
      disable_external_repos 'Reset Repositories for cleanup' \
      purge_not_required     'Purge not required Packages' \
      delete_log_file        "Delete Script logs from $log_file" \
      3>&1 1>&2 2>&3)

    # Run the task
    #$MAIN

    whiptail_exitstatus=$?
    _debug_log "Whiptail Exit status is : $whiptail_exitstatus"
    if [ $whiptail_exitstatus = 0 ]; then
      _debug_log "Whiptail Choice is: $task"
        case $task in
    update_repos )            _show_confirmation_dialogue_for_tasks "Update Repositories metadata/index" "Update Repositories index/metadata?" "$task"
                              ;;
    upgrade_system )          _show_confirmation_dialogue_for_tasks "Upgrade Packages" "This will upgrade all your packages to the latest version available.\nContinue?" "$task"
                              ;;
    add_ppas )                _show_confirmation_dialogue_for_tasks "Add Additional PPAs" "This task will add PPAs specified in $ppa_list file. Would you like to continue?" "$task"
                              ;;
    add_repositories )        _show_confirmation_dialogue_for_tasks "Add Additional Repositories" "Following additional Repositories:\nGoogle Chrome & Maps, Google Cloud SDK\nDocker\nInsync\nSpotify\nWineHQ\n will be added.\nShall I do it?" "$task"
                              ;;
    install_apps )            _show_confirmation_dialogue_for_tasks "Install Apps" "I can Install the packages listed in lists files mentioned in app-list.list.\nNo checks are being made on the validity of the list. Be careful while installing graphic drivers and core system componetnts. Shall I do it?" "$task"
                              ;;
    disable_external_repos )  _show_confirmation_dialogue_for_tasks "Remove External Repositories" "I can remove External Repositories added and PPAs in the ppa.list. Apps installed via ppa will be reverted to original versions/uninstalled. Apps from Repositories will be kept as it is. Shall I do it for you?" "$task"
                              ;;
    purge_not_required )      _show_confirmation_dialogue_for_tasks "Purge Unwanted Packages" "Shall I Purge Unwanted packages mentioned in purge.list?" "$task"
                              ;;
    all_in_one )              _show_confirmation_dialogue_for_tasks "All In One" "This task will do the following.\nUpdate Repositories\nUpgrade Packages\nAdd Repositories and PPAs\nInstall apps from List\nPurge Unwanted Packages\nContinue?" "$task"
                              ;;
    install_debs )            _show_confirmation_dialogue_for_tasks "Download & Install DEB files" "DEB Files in the list deb-files.list will be Download and installed. Proceed with the task?" "$task"
                              ;;
    delete_log_file )         _debug_log "Delete log selected"
                              delete_log_file;
                              ;;
        esac
    else
      _debug_log "Whiptail Exit code : $whiptail_exitstatus"
      _debug_log "Exiting because user selected Quit or Whiptail has non zero exit code."
    fi
}



function main()
{
  _init_script_variables;
  _init_script_initialization;
  _debug_log "Checking if running as root"
  if [[ $EUID -ne 0 ]]; then
    _debug_log "${_whoops} Insufficinet privilages!!"
    set_yellow;
    _log_and_show "${_whoops} This script must be run as root."
    _log_and_show "${_notice} Please use sudo ./$SCRIPT to run this as root.\n"
    set_default;
    exit 100;
  fi

  # Process command line arguments.
  while [ "$1" != "" ]; do
      case ${1} in
          -s | --simulate )       simulate_apt_install=true;
                                  set_yellow;
                                  _log_and_show "${_simulate} is set to true";
                                  set_default;
                                  ;;
          -f | --fix )            fix_repo_not_available_for_latest="true";
                                  set_yellow;
                                  _log_and_show "${_fix_repo} is set to true. Using codename: $codename_previous_release";
                                  set_default;
                                  ;;
          -d | --deboalt )        bool_purge_not_required_pkgs="true";
                                  set_yellow;
                                  _log_and_show "${_purging} is set to true. Packages in the list $purge_list will be purged!!";
                                  _log_and_show "${_warn} No checks are being made on the Packages in the list. Use carefully!. Purging something like sudo is stupid idea!";
                                  set_default
                                  ;;
          -y | --yes )            bool_say_yes_to_all="true";
                                  set_yellow;
                                  _log_and_show "${_warn} Will automatically assume yes for all the options available in the script!";
                                  set_default;
                                  ;;
          -l | --log )            bool_say_yes_to_all="true";
                                  set_default;
                                  delete_log_file;
                                  ;;
      esac
    shift
  done

  _fix_ubuntu_derivatives;
  _test_internet_connection;
  _test_conflicting_apps;
  # CI testing
  if [ "$TRAVIS" == "true" ]; then
    set_blue
    _log_and_show "${_travis} RUNNING in TRAVIS CI"
    set_default
    all_in_one;
    _line_fill;
    set_blue;
    echo "The Log generated by script is below"
    set_default;
    cat "$log_file"
    delete_log_file;
  else
  _process_opts;
  fi

}


#Initialze main
main "$@"
#Logs exit and exit code of script
_script_exit_log
